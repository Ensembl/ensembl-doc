This document describes how to load the sequence level pieces into the 
ensembl. Another document exists , sequence_schema_and_api.txt which gives
a more through picture of the schema and api.

for any questions please contact ensembl-dev(ensembl-dev@ebi.ac.uk)

What you need
=============

*a mysql instance
*The ensembl core CVS module named ***REMOVED***
*bioperl

This document describes the use a script which is found in the cvs module
ensembl-pipeline but nothing else requires that cvs module.

Creating the Database
=====================

You need to create a database on your mysql instance and then create the 
tables.

The SQL table definitions are found in the file:
ensembl/sql/table.sql

To add the table definitions to an already existing database perform the 
following command from a shell:

mysql -h localhost -u ensdamin -p *****  my_ensembl_db < path/to/ensembl/sql/table.sql


The database should now contian all the tables from the ensembl core schema.
Tables which you will now need to fill out are


coord_system
seq_region
dna
assembly
meta


each of these tables are described in sequence_schema_and_api.txt.


Loading Sequence
----------------

the sequence can be loaded into your database using this script

ensembl-pipeline/scripts/load_scaffolds.pl, which uses Bioperl SeqIO to
parse through a fasta file and load the sequence

This script takes several options

    -dbhost    host name for database (gets put as host= in locator)
    -dbname    For RDBs, what name to connect to (dbname= in locator)
    -dbuser    For RDBs, what username to connect as (dbuser= in locator)
    -dbpass    For RDBs, what password to use (dbpass= in locator)

    -seqfile   the fasta file which contains the sequence
    -coord_system_name the name of the coordinate system being stored
    -coord_system_version the version of the coordinate system being stored
    -default_version, reflects this is the default version of this 
                      coordinate system, this is true by default but can
                      be switched off with -nodefault_version
    -top_level  reflects this is the top level of sequence in the database
                this is off by default
    -sequence_level reflects this is a sequence level coordinate system
                    this is on by default
    -help      displays the documentation with PERLDOC


This script by default takes the first word which is part of the sequence 
description as the slice name.

line 123:  my @values = split /\s+/, $seq->desc;
line 124:  my $name = $values[0];

You may need to alter this is this operation doesn't retrive the ID you
which to use as the seq region name

By default this script assume the version of sequence you are loading will 
be the default version. 


an example commandline

./load_scaffolds.pl -dbname my_ensembl_db -dbhost localhost -dbuser ***REMOVED*** -dbpass ***** -seqfile my_contigs.fa -coord_system_name contig


Loading assemblies
------------------

An assembly is a set of instructions on how to build largers pieces of 
sequence from smaller pieces of sequence. The assembly table as described
in sequence_schema_and_api.txt will contain two sets of coordinates. 
Assembled coordinates from chromosomes, super_contigs or clones and 
component coordinates from the smaller pieces which make up the assembly.
These smaller pieces are frequently contigs. 


As standard assemblys come in an agp file. The expected format for an
agp file is explained here

http://www.sanger.ac.uk/Projects/C_elegans/DOCS/agp_files.shtml

This file needs to be parsed and loaded into the assembly table 

for an example of code which does this look at 

ensembl-pipeline/scripts/DataConversion/wormbase/WormBase.pm

this contains a method called agp_parse to see how this method is used 
look at the sequence_store.pl script in the same directory

The meta table also needs to be given information about what mappings your
assembly table contains. The format should be this name:version|name:version
and as can be seen below the :version is optional

+---------+------------------+--------------------------+
| meta_id | meta_key         | meta_value               |
+---------+------------------+--------------------------+
|      43 | assembly.mapping | chromosome:NCBI33|contig |
|      44 | assembly.mapping | clone|contig             |
|      45 | assembly.mapping | supercontig|contig       |
+---------+------------------+--------------------------+

If you look at the bottom of the sequence_store.pl script for wormbase
an example of code to do this can be seem
