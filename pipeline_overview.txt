This document covers the bigger picture of the ensembl-pipeline system.

Finer detailed documentation describing the various facets of the the ensembl-pipeline can be found in the ensembl-doc CVS module.

This document will first give an overview of the whole pipeline process.  It will then summarise 
the the steps of a standard ensembl build.  It will then finish with a short introduction to  
the more specific documents that describe in fine detail the running of each of the pipeline tasks.


The ensembl build process
-------------------------

When a new genome sequence and/or a new assembly becomes available, the first thing which needs to be done 
is to load this sequence and assembly into a 
DATABASE. Once this has been achieved the actual processing
can begin. 
The first data processing stage is the RAW COMPUTE.  This process involves running:
- repeat finding analyses
- ab initio genefinders, like GenScan
- species non-specific BLAST against standard databases 
  such as Uniprot and Unigene
- programs to find features like CpG islands and tRNAs in the genome

Next the GENEBUILD is run. The genebuild involves several distinct stages.

First, the TARGETTED GENEBUILD is executed.  This involves two main steps:
a) species-specific proteins are aligned to
the genome using pmatch and subsequently filtered to get the best in genome hits. 
b) filtered pmatch hits from (a) are used to seed re-BLASTs and genewise runs in order to
build a coherant CDS for these genes.

Following the targetted genebuild comes the SIMILARITY GENEBUILD.  In this step
the BLAST results obtained from the raw computation  
are used in a very similar process to the targetted genebuild, the significant difference being that 
proteins from other species are used to seed genewise-built gene structures. 
For those species which are blessed with a lot of experimentally generated protein sequences, the targetted genebuild
stage tends to provide the bulk of genes in the build - as the similarity genebuild generated genes are only used where a targetted genebuild gene is absent.  
However, in less-studied genomes (so-called 'virgin' genomes) there are less species-specific protein sequences 
and hence the similarity build plays a much more central role in providing genes.

After these protein-based gene predictions have been performed, an attempt at adding UTR sequences to these genes is made.
If cDNA sequences for the species in question are available, these sequences are mapped to the genome
using a program called exonerate. These 
genome-cDNA alignments are filtered to only include the the 'best in genome' match.
Where cDNAs mapped in this manner overlap genes predicted in the preceeding stages, any non-translated
UTR from the cDNA is spliced onto the gene prediction.
This stage is called UTR ADDITION.

Each of the prior stages of the genebuild create a set of genes which will 
be partially redundant to one another.   These gene sets need to be reconciled to 
create a single non-redundant set.
This reconciliation is achieved using the main Genebuilder module - hence it is
called the GENEBUILD step. The genebuilder compares genes from the different 
sets and aims to combine or merge identical 
transcripts.  When transcripts are combined, the features (evidence used to predict
the gene) are transferred from the transcript and added to create a new combined gene.

If the species being built has plentiful cDNAs it is often desirable to perform 
an additional step called the GENECOMBINER. 
This can use genes predicted
from cDNAs (which can be built from the exonerate alignments produced
from UTR addition step - this is done in a similar fashion to the EST-based genebuild 
briefly mentioned below) and uses them where they describe genes that are absent from
the set created by the Genebuild step.  Where these cDNA genes overlap previously identified
genes, they are often used to add 
extra alternative transcripts to these genes.

Once a 'final' gene set has been obtained, a number of post-processing procedures are applied
to filter and annotate the predicted genes.

A PSEUDEOGENE ANALYSIS is executed to in an attempt to 
weed out and flag processed pseudogenes which have been included in the gene set.

A PROTEIN ANNOTATION stage is also performed.  This serves to identify known
protein domains and involves running programs such as 
pfam, prosite and tmhmm 
against our gene set.

  Finally we run an XREF ANALYSIS which maps the proteins translated from our gene set to other 
databases such as SwissProt and RefSeq and HUGO gene ids.  This provides a linking of ensembl 
gene and protein ids to external database ids and allows annotation of the genes that we have 
identified.  This analysis is quite
species specific and involves using a series of scripts which are not formally part of the pipeline
code (which live in the core CVS module).

Separate to the main gene build just described we also run an EST GENEBUILD.  This process process
currently does not contribute genes to the main ensembl set, but produces a set of EST-genes.  The process is described in detail 
in other documents.  Briefly,  the EST genebuild process aligns ESTs to the genome (using
exonerate) and builds a non-redundant set of genes from clusters of overlaping ESTs.  While
transcript sequences taken from ESTs don't necessarily translate, EST genes and their transcripts
are massaged along with genomic sequence information to produce a set of fully translating 
open reading frames.

Overview of stages
------------------

1.  Sequence loading
2.  Raw compute
3.  Targetted build
4.  Similarity build
5.  cDNA alignment
6.  UTR addition
7.  Genebuild
8.  Gene Combiner
9.  Pseudogene analysis
10. Protein annotation
11. Id cross (Xref) mapping

To do all this we use the following ensembl CVS modules :

ENSEMBL         : core ensembl code - controls all database activity, describes all the
                  key ensembl data objects such as genes, transcripts, etcetera. 
ENSEMBL-PIPELINE: code which controls the pipeline system,
                  submits jobs to your compute resource etcetera.  
                  partially contains the code which runs our analysis.
ENSEMBL-ANALYSIS: contains code which runs our analysis. Currently
                  this includes wrappers for the raw compute, BLAST 
                  and repeat masker.
ENSEMBL-DOC     : ensembl documentation, including documents describing the fine details of each pipeline process


Bioperl (www.bioperl.org) is also needed.  Currently,
we are working with bioperl-live version bioperl-1.2.3.

You will also need access to a MySQL database.  You will need at least one instance, although we recommend that you use three or more 
separate instances running on separate machines.  If you are running a sizable amount of computation, or are annotating a whole
vertebrate genome, a greater number of database servers will substantially increase the speed of your overall throughput.  In house, the ensembl team suffers more through slow database access (despite having _really_ fast databases) than for want of CPU cycles.
 


Other useful documents (from the ENSEMBL-DOCS CVS module) :
-----------------------------------------------------------

* loading_sequence_into_ensembl.txt
Describes how to initally load sequence data (from fasta files) and assemblies (from agp 
files) into an ensembl database.

* using_the_ensembl_pipeline.txt
Describes the job submission and control system, including initial 
pipeline setup.

* running_the_rawcomputes.txt
Describes how the raw computes should be run.

* running_the_markers.txt
Describes the process of mapping STS markers from dbSTS and other sources
onto a genome.

* running_the_genebuild.txt
Describes the process of running the genebuild.

* using_blast_in_the_pipeline.txt
Describes the BLAST system as implemented in ensembl-analysis code-base.

* protein_mapping.txt
Describes the process of mapping ensembl genes to other data sets (e.g. 
refseq or swissprot).  Be aware that some organism-specific issues do
complicate this. 

You can also gain an overview of both our pipeline system and our genebuild
from two recent Genome Research papers:

Curwen V, Eyras E, Andrews TD, Clarke L, Mongin E, Searle SM, Clamp M. (2004) 
The Ensembl Automatic Gene Annotation System 
Genome Research, 14:942-950.

Potter SC, Clarke L, Curwen V, Keenan S, Mongin E, Searle SM, Stabenau A, Storey R, Clamp M.
(2004) The Ensembl Analysis Pipeline
Genome Research, 14:934-941. 

