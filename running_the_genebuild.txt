Running an assembly based genebuild using the ensembl pipeline
--------------------------------------------------------------

This is a document about how to run the genebuild.

(Contact: ensembl-dev@ebi.ac.uk)

A. What you will need
---------------------

In order to run this process you will need the following things

the ensembl core api
the ensembl-pipeline api
bioperl (we are currently using Bioperl 0.72, it will probably work
         with newer versions but we haven't tried it)


these should all be availble on the web and from cvs

Acess to at least one mysql instance

B. Overview
-----------

The genebuild is the process by which protein and cdnas which have been
aligned to the genome are used to predict gene structures. The
structures are then collapsed down into a non redundant set of genes
with alternative transcripts.

All genes have supporting evidence in the form of the protein/cdna 
alignments which were used to build them


The genebuild process has several steps and needs several data sources


The data sources needed are, a core ensembl database loaded with dna
(see loading_sequence_into_ensembl.txt) tables which are required to be 
filled are clone, contig, dna, assembly, chromosome and meta, a set of 
exact protein matches to the genome (running_pmatchs.txt), a set of 
blast hits which are generally produced by running the raw computes
(running_the_rawcomputes.txt) and optionally a set of ab initio gene
predictions which should also come from the raw computes


The main genebuild has 5 main stages

1. The Targetted Build. 

this is where the alignments generated by using pmatch are used to seed
genewise alignments. The base RunnableDB used is FPC_Targetted_GeneWise.
During the process the pmatch features are fetched. The protein
sequences of the pmatch features is fetched and then those are reblasted
against the genome. The results from the reblast are used to seed 
genewise alignments which in turn produces gene structures


2. The Similarity Build

this is where the alignments from the blast to various protein sets
produced in the raw computes are used to seed genewise alignments.
The module used is FPC_BlastMiniGenewise and the procedure is basically
the same as for the targetted build but those regions which contain
genes which are predicted in the targetted stage are filtered out
as it is generally assumed that the targetted genes from exon matches to
proteins will be better than any genes build on the basis of similarity.


3. The cDNA build

Here alignments to full length cdnas are produced in order to add utrs
to the protein based genes, the procedure is more fully explained in
cdna_analysis.txt

4. Adding UTRS

the cdna based predictions and the protein based predictions are 
combined using the module Combine_Genewises_and_E2G. Here if the
cdna based predictions overlap with the protein based predictions
the algorithym decides whether extra information can be added to the
protein based preidction

5. GeneBuilder

here all the predictions mare are collapsed down into a not redundant 
set of transcripts. Ab initio predictions which are well supported by
blast results can also be added into the prediction set, all this
is done from the RunnableDB Gene_Builder

6. GeneCombiner

Here the cdna predictions are used to add either new predictions where 
they don't overlap with protein based predictions or they can also add
new alternative transcripts to existing genes.


B. General preparation
----------------------

Its a good idea to have directories where you can keep all the 
stdout/stderr from the jobs, and for the data for the jobs. 

Get checkouts of the three pieces of code you need, ensembl, 
ensembl-pipeline and bioperl and make sure they are in your PERL5LIB

make sure you have access to binaries for pmatch and and genewise
both of which are availble from the ensembl cvs under rd-utils and
wise2 packages respectively

setup the databases

this is a diagram of all databases you require


 _______  
|       |   pmatches
| GB_DB |   features 
|_______|
      |
      |
targetted genewise
      |
      |
similarity genewise
      |	   
      |              __________	
      |             |          | 
      |------------>| GB_GW_DB |
      |             |__________|         ____________
      |                  |              |            |
      |-----------------\|/-------------| GB_cDNA_DB |
      |     combine genewises and cdnas |____________|
      |                  |
      |             _____|______	
      |            |            | 
      |            | GB_COMB_DB |
      |            |____________| 
      |                  |
       -----------------\|  
	            genebuilder
	            _____|______	
                   |            | 
                   | GB_FINALDB |
                   |____________| 


they all need to contain the core schema and these tables need to be
filled in clone, contig, assembly, analysis, meta, chromosome

the meta table should contain an assembly.default entry


| meta_id | meta_key         | meta_value |
+---------+------------------+------------+
|       2 | assembly.default | RGSC3.1    |

the analysis table should be identical in all the databases even down
to the analysis_id as at present if this is not the case it breaks
the pipeline system

the reference database GB_DB should also contain the pipeline tables
which can be found in ensembl-pipeline/sql/table.sql and whose function
are describe in using_the_ensembl_pipeline.txt


More info about the various databases:
--------------------------------------

Here we descibe the various databases and the configuration options 
relevant to each. These configuration options can be found in 
Bio::EnsEMBL::Pipeline::Config::Database

* reference db ( or sometimes called dna db )
Contain the dnas, the features from the pre-compute pipeline and the 
pmatch_features (included in the extra tables pmatch_feature and 
protein). All the other databases will use it as dna_db to get 
sequence when necessary. This database should also contain the pipeline
tables and be the database you point the RuleManager script at (see
using_the_ensembl_pipeline.txt)
Databases::GB_DBHOST
Databases::GB_DBNAME
Databases::GB_DBUSER
Databases::GB_DBPASS

* genewise db
In this database we will store the genes/transcripts/exon/translation/
supporting_evidence from the runs of similarity_genewise 
(FPC_BlastMiniGenewise) and targetted_genewise (FPC_TargettedGeneWise)
Databases::GB_GW_DBHOST
Databases::GB_GW_DBNAME
Databases::GB_GW_DBUSER
Databases::GB_GW_DBPASS   

* cdna db
this database contains the genes/transcripts/... from the analysis of 
cdnas with exonerate
Databases::GB_cDNA_DBHOST
Databases::GB_cDNA_DBNAME
Databases::GB_cDNA_DBUSER
Databases::GB_cDNA_DBPASS

* combined genes db
This db will have the genes/... built by combining the cdnas from
GB_cDNA with the genewise genes.  Before running the combining code
(Combine_Genewises_and_E2Gs), you should copy all genewise genes (plus
translations,etc...)  into this database from GB_GW_DB. In this way we
assure that combined_genes will get different internal ids, which will
be less confusing during the GeneBuilder analysis.
Databases::GB_COMB_DBHOST             
Databases::GB_COMB_DBNAME
Databases::GB_COMB_DBUSER
Databases::GB_COMB_DBPASS

* final genes db
This database will have the genes built by GeneBuilder from the 
genewise and combined genes in GB_COMB_DB and the genescan prediction 
in GB_DB. 
Databases::GB_FINALDBHOST
Databases::GB_FINALDBNAME
Databases::GB_FINALDBUSER
Databases::GB_FINALDBPASS



Other Config
------------

The Genebuild also requires several other pieces of config filled out.
Some of these are required for the pipeline to run and this are located
in Bio::EnsEMBL::Pipeline::Config,

These files are General, BatchQueue and Blast and the entries are
descibed in using_the_ensembl_pipeline.txt

The genebuild has several general config files two. These are found in
Bio::EnsEMBL::Pipeline::Config::GeneBuild

General.pm, this contains general options which are used by many of
the RunnableDBs

GB_INPUTID_REGEX, the regular expression which should be used to 
		  parse the input ids which should be in the format
		  chr_name.start-end, e.g our normal input ids look
		  like this 1.1-100000 and the regular expression
		  (^\S+)\.(\d+)-(\d+) will produce the three
		  separate values of 1, 1 and 100000 for the chromosome
		  name, start and end

The other options are very rarely used by control how the blast hits
from the reblast stage in the BlastMiniGenewise runnable are dealt with

Scripts.pm, this contains settings mainlyused by scripts run before or
	    during the genebuild

GB_KILL_LIST, this is the path to a file which cotains a list of 
	      protein ids which shouldn't be used when building genes.
	      This tends to be because the protein is based on a repeat
	      retrovirus or is just labelled a hypothetical protein
	      The file we use can be located here 
	      ensembl-pipeline/scripts/GeneBuild/kill_list.txt


GB_PROTEOME_FILES, this is used in the new_prepare_proteome.pl script
		   and its function is described in 
		   running_pmatches.txt

There are more options in this file but they are involved with the 
old way of running the genebuild and shouldn't be needed


Sequences.pm, this contains the location of sequence indexes

GB_PROTEIN_INDEX, this is the path to the directory/file used by 
		  the sequence index you are using. We generally use
		  ODBAIndexSeqFetcher

GB_PROTEIN_SEQFETCHER, this should be the perl path to the
		       seqfetcher you are using, all the Seqfetchers   
		       we have code for can be found in here
		       Bio::EnsEMBL::Pipeline::SeqFetcher
 
GB_CDNA_INDEX is not used anywhere so doesn't need to be filled in



Genewise.pm, these contains various setting used by the genewise 
	     program

GB_GENEWISE_EXE, the path to the genewise executable
GB_GENEWISE_MEMORY, the maximum amout of memory the genewise program
		    has avalible in its main calculation
GB_GENEWISE_GAP, the gap penalty
GB_GENEWISE_EXTENSION the gap extension penalty
GB_GENEWISE_SUBS the subsititution error rate
GB_GENEWISE_OPTIONS other genewise options

the defaults in the Genewise.pm.example file are the standard settings
we use for most builds. For teh briggsae genebuild we increased the 
gap extension penalty as nematodes have significantly short introns
than humans

Now there are a series of specific config files for the various 
processes 

Targetted.pm, these are settings required for the Targetted stage
most of the variables should be fairly self explaintory, the .example
file should contain the settings we use as default for most of our builds

three variables to pay closer attention to are
GB_TARGETTED_GW_GENETYPE, this is the type which will be assigned to
each gene predicted during this process. We generally use the logic
name of the analysis object
GB_TARGETTED_MASKING, this is an array defines if repeatmasked seq is to
be fetched and what masking there should be if any. for the targetted 
jobs we generally use unmasked dna 
GB_TARGETTED_SOFTMASK, this flag would make any masking in lowercase
rather than Ns but as genewise currently doesn't recognise softmasking
it generally isn't used

Similarity.pm, these settings are required for the similarity stage
of the build

most of these settings like for Targetted are relatively self
explainatory and your should for the most part beable to use
the settings from the .example file

variables to note are

GB_SIMILARITY_DATABASES,
this is an array of hashes, each hash contains details
of once source of protein based blast hits, type should be the logic
name of the blast analysis, threshold is the score below which hits
aren't returned, index should be the path to the file/dir which contains
an index of the approriate protein sequences and seqfetcher should
be the perl path to the appropriate seqfetcher to get them out


GB_SIMILARITY_GENETYPEMASKED, this is a option you can use if you want
not run the similarity build over sequences which aren't the targetted
genes but something else like EST genes or cDNA genes, also if you 
put enmpty quotes in the array nothing will be masked. This was put in
for the anopheles ensembl build as the targetted genes for anopheles 
weren't very good

GB_SIMILARITY_BLAST_FILTER, this is an optional filter which
can be applied to blast results before the proteins are passed to 
BlastMiniGenewise
