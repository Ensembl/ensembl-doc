
This document describes how to use the different tools
in Ensembl to do comparisons between genes, transcripts and exons.
The classes are in ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/GeneComparison/
and the scripts are in 
ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/GeneComparison/

It describes:
1.- compare transcripts and exons between orthologous genes in different species
2.- description of some modules and methods useful for these comparisons
3.- how to run comparisons agains benchmark genes or annotated genes (under construction)
4.- hot to run sequence based comparisons between two sets of cdnas.

############################################################
# 1.- Comparing isoforms in gene pairs
############################################################

1) dump in a file (e.g. gene_pairs ) the 
gene ids for the pairs, e.g.:

ENSG00000000003	ENSMUSG00000031252
ENSG00000000005	ENSMUSG00000031250
ENSG00000000419	ENSMUSG00000027542
...

2) run the script
../ensembl-pipeline/scripts/GeneComparison/make_bsubs_compare_isoforms.pl

Usage: make_bsubs_compare_isoforms.pl -tmp_dir /full/path/output_dir/
			[ -gap_penalty n -coding_exons -from_file < file_with_pairs]

e.g: make_bsubs_compare_isoforms.pl -tmp_dir /ecs2/work1/eae/.../dir -coding_exons -from_file < gene_pairs


3) you should get one file Compare_isoforms_jobs

with lines like bsub -q acari -C0 -m"rlx_hosts" -o /ecs2/work1/eae/TheYearOfTheRat/LeoRatOrthologs/human_mouse/results_isoform_comparison/stdout//comparison_ENSG00000000457_ENSMUSG00000026584 -e /ecs2/work1/eae/TheYearOfTheRat/LeoRatOrthologs/human_mouse/results_isoform_comparison/stderr//comparison_ENSG00000000457_ENSMUSG00000026584 
-E "/nfs/acari/eae/ensembl/ensembl-pipeline/scripts/GeneComparison/compare_isoforms.pl -check" /nfs/acari/eae/ensembl/ensembl-pipeline/scripts/GeneComparison/compare_isoforms.pl -gene_id1 ENSG00000000457 -gene_id2 ENSMUSG00000026584 -coding_exons

and a directory results_isoform_comparison/, with two subdirs: stderr/ stdout/


4) Before running - have a look at compare_isoforms.pl
You have to write in the script the databases where the genes are:

Everything looks like you're comparing human against mouse.
You only need to make do the appropriate metamorphoses of the variable values to the
dbs you are gonig to use:

# human_db
my $human_dbname = 'homo_sapiens_core_14_31';
my $human_dbhost = 'ecs2f';
my $human        = 'Homo sapiens';
# human_dnadb
my $human_dnadbname = 'homo_sapiens_core_14_31';
my $human_dnadbhost = 'ecs2f';

# mouse_db
my $mouse_dbname = 'mus_musculus_core_10_3a';
my $mouse_dbhost = 'ecs1d';
my $mouse        = 'Mus musculus';
# mouse_dnadb
my $mouse_dnadbname = 'mus_musculus_core_10_3a';
my $mouse_dnadbhost = 'ecs1d';


5) IMPORTANT:
there are two lines below in the script:
my $db1 = $human_db;
my $db2 = $mouse_db;

db1 is the one which refers to the first id in your first file 'gene_pairs'
db2 refers to the second


6) to complicate things more, there are three possible checks to do on 
every gene pair:

      $gene_pair->compare_CDSs( $gene1, $gene2, $coding_exons );
Make the transcript pairs based on the blastp comparisons of the CDSs.
It will compare exons using dynamic programming for global alignment in exon-space.

      $gene_pair->compare( $gene1, $gene2, $coding_exons);
Makes the transcript pairs based on simple blastn comparisons of the
cDNAs. It will compare exons using dynamic programming for global alignment in exon-space.

      $gene_pair->find_exact_matches( $gene1, $gene2, $coding_exons);
Makes the transcript pairs based on simple blastn comparisons of the
It will compare exons using a blastz comparison of the genomic extent of the cDNAs
(can use coding exons only or all exons).

7) you can run this in your favourite way. If you don't want to restrict to rlx nodes you can change that in
the make_bsubs_compare_isoforms.pl script.

8) to get the output files one just need to collect the lines with the summary data from the files in
stderr/

you just need to run ../ensembl-pipeline/scripts/GeneComparison/collect_isoform_comparison_output.pl
on a separate directory:
 shell> collect_isoform_comparison_output.pl
 Script to collect the results from the run of compare_isoforms.pl
 it prints the results into two files transcripts.out and genes.out
 Usage: collect_isoform_comparison_output.pl /dir/with/stderr_results/

 it will create 7 files with the summary lines.
 (will only fill those for which it ran an analysis)


############################################################
# 2.- description of some of the methods and modules
############################################################

The module ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/GeneComparison/GenePair.pm 
contains the logic of

* take two genes (orthologs)
* compare all their transcripts
* select the best transcript pairs with stable-marriage
* for each selected pair, compare the exons

There are two methods:

compare() and find_exact_matches(),

both do basically the same thing above, except for the
step of comparin the exons:
compare() runs a global alignment in exon space to
find the alignment between the exons, whereas
find_exact_matches() runs blastz on the genomic extent of
both transcripts to find out whether the exons align with each other.

compare()

 this method reads two genes (suposedly orthologs) in slice coordinates
 and compares its transcripts all against all using blastn.
 The best possible transcript-pairs are derived using
 the stable-mariage algorithm. 
 For each one of these selected pairs
 ir runs a global dynamic programming alignment algorithm
 on exon space to match up the exons.

 You can pass a flag to run only with coding exons.


find_exact_matches()

 This method is similar to the one above, except 
 for the exon comparison step, which uses the genomic extent
 of the transcripts in the pair.

 This method reads two genes suposedly orthologs (in slice coordinates)
 and compares its transcripts all against all using blastn.
 The best possible transcript-pairs are derived using
 the stable-mariage algorithm. 
 For each one of these selected pairs
 it uses blastz to compare the genomic extent of the transcripts
 and locate whether the exons align with each other.

 You can also pass a flag to run only with coding exons.

Some of the methods used here are:

my ($score,$pair) =Bio::EnsEMBL::Pipeline::GeneComparison::TranscriptPair->blast_isoforms( 
$human_t, $mouse_t, $coding_exons );
to compare two transcripts using blastn

$object_map->match($human_t, $mouse_t, $score );
to store the result.

$best_pairs_object = $object_map->stable_marriage;
to obtain the best pairs

my ($missing_terminal_exons, $exon_skipping, $all_exons_conserved) = 
          $self->compare_Exons( $element1, $partner, $self->gap_penalty, 
$coding_exons, $human_id, $mouse_id);
to run the dynamic programming in exon space

my ($missing_terminal_exons, $exon_skipping, $all_conserved) = 
Bio::EnsEMBL::Pipeline::GeneComparison::TranscriptPair->blast_genomic_isoforms( 
$human_t, $mouse_t, $coding_exons, $gene_id1, $gene_id2);
to blastz the transcripts in a pair

each one of these two last methods will also print an exon alignment of 
the form:

TRANPAIR        ENST00000290466 human_exons:37  human_miss_term_exons:0 human_miss_int_exons:0  conserved_exons:35      with_same_length:27     with_same_phase:31
ENSMUST00000048608      mouse_exons:35  mouse_miss_term_exons:0 
mouse_miss_int_exons:2
20.1-62802940:62128175-62128277 (103) strand:1 phase:-1 endphase:0      <---->  2.1-181423755:180740240-180740341 (102) strand:1 phase:0 endphase:0      score= 171
20.1-62802940:62130071-62130269 (199) strand:1 phase:0 endphase:1       <---->  2.1-181423755:180741596-180741794 (199) strand:1 phase:0 endphase:1      score= 279
20.1-62802940:62130623-62130716 (94) strand:1 phase:1 endphase:2        <---->  2.1-181423755:180742085-180742178 (94) strand:1 phase:1 endphase:2       score= 148
20.1-62802940:62131319-62131400 (82) strand:1 phase:2 endphase:0        <---->  2.1-181423755:180742647-180742728 (82) strand:1 phase:2 endphase:0       score= 144
20.1-62802940:62131602-62131662 (61) strand:1 phase:0 endphase:1        <---->  2.1-181423755:180742968-180743028 (61) strand:1 phase:0 endphase:1       score= 103
20.1-62802940:62134777-62134852 (76) strand:1 phase:1 endphase:2        <---->  2.1-181423755:180747887-180747962 (76) strand:1 phase:1 endphase:2       score= 93
20.1-62802940:62136242-62136326 (85) strand:1 phase:2 endphase:0        <---->  2.1-181423755:180750077-180750161 (85) strand:1 phase:2 endphase:0       score= 146
etc...

to give you an idea of the alignment. 




############################################################
# 4.- comparisons to annotation/bechmark genes
############################################################

under construction


#############################
# 3.- SEQUENCE BASED COMPARISON #
#############################


### cDNA_Comparison ###

It is basically a wrapper around the Exonerate Runnable class.

You need to have two multiple fastA files with the cdnas you want to compare.
One of the fasta files will have to be split into chunks. Exonerate will run per chunk.

Before starting the analysis, you'll need to fill in some entries in
Bio::EnsEMBL::Pipeline::GeneComparison::GeneCompConf

COMP_EXONERATE_RUNNABLE     => 'Bio::EnsEMBL::Pipeline::GeneComparison::cDNA_Comparison',
		 # where the cDNA chunks are, and how many there are
COMP_cDNA_CHUNKDIR          => where the cdna chunks are
COMP_cDNA_CHUNKNUMBER       => number of chunks (such that there are about 20-200 cdnas per chunk)
COMP_cDNA_FILE              => cDNAs you want to compare to
COMP_TRANSCRIPTS            => transcripts set we want to compare against the cdnas specified in COMP_cDNA_FILE
			       (e.g. if we are comparing ensembl against RIKEN cdnas, here would go the ensembl
			        cdna file)
	
To create the job files automatically, you need to run
ensembl-pipeline/scripts/GeneComparison/make_cDNA_exonerate_bsub.pl		
and need to fill in some fields in the GeneCompConf file:

COMP_TMPDIR                 => where the results will go
COMP_EXONERATE_BSUBS        => file where the bsub lines will be written
COMP_QUEUE                  => farm queue where the analysis will run
COMP_SCRIPTDIR              => path to the scripts directory: ensembl-pipeline/scripts/GeneComparison/

The splitting of the cdna file can be done as follows:
			  	 
    /acari/work2/gs2/gs2/bin/fastasplit <fastapath> <outputdir> <chunknum>
 
 <fastapath> = the myltiple-entry fastA file with the ests
 <outputdir> = dir where we're going to put the chunks
 <chunknum>  = total number of chunks

		 



Post-processing of the data:

ensembl-pipeline/scripts/GeneComparison/find_pairs_cDNA_exonerate.pl -file pairs > & log_file

THis must be run on the directory where the output data is, and the 
files 'pairs' and 'log_file' should be put in an upper level in the directory structure so that the
script does not attempt to open them. Also, the script assumes that
the output files are gzipped.
