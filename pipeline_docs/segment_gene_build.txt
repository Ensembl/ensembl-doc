==========================================
Predicting TcR/Ig gene segments in Ensembl
==========================================

The "classical" Ensembl gene-build performs badly in genomic regions
containing clusters of Immunoglobulin/T-cell repeptor gene
segments. This is because many proteins in Uniprot are full-length
products of a transcript expressed from the genome after the associated 
V(D)J recombination event. When aligned back to the genome using a
spliced-alignment program (e.g. Genewise, Exonerate), the segment
boundaries are often incorrectly predicted because the junctions have a
very different sequence signal to that of splice sites. In addition,
the C and V segments are often multi-exon, making delineation of the
predicted "transcript" into V/D/J/C segments non trival. 

To overcome this problem, we make use of the IMGT database
(http://imgt.cines.fr/) which contains annotations of individual gene
segments on RNA and genomic DNA reference entries. Our strategy then
is extract the segments for our species of interest from IMGT and
align those to the genome (using Exonerate). The gene segments are
then transferred into a database that contains an existing, standard
gene-build, removing transcripts that "interfere" (overlap at the exon
level) with segments (in the assumption that they are wrong).

Note that we currently only perform the segment_build for human and mouse 
as they have sufficient genes annotated by IMGT. This analysis has not
yet been included in the genebuild for other species.

========
OVERVIEW
========

The procedure can be broken down into the following stages:

(1) Download and preparation of the IMGT database flat file

(2) Extraction of relevant segment sequences from the file file

(3) Alignment of segment sequences to the genome using Exonerate

(4) Run the IgSegBuilder, which uses the Exonerate alignments to
    construct the set of gene segments

(5) Integration of segments into main build.

(6) Xrefs to the IMGT/LIGM-DB and IMGT/GENE-DB databases


============
REQUIREMENTS
============

- Code

  The following CVS check-outs are required (and the path to the
  "modules" directory in each of the check-outs should be added to
  PERL5LIB): 

  ensembl
  ensembl-analysis
  ensembl-pipeline
  ensembl-personal/klh/imgt

  (The last path contains some specific Bio::Seq and Bio::SeqIO modules
   required by the sequence extraction script.)

  As normal, bioperl is also required. For the extraction of sequence
  segments from the IMGT flat-file, it is necessary to use a recent
  version of bioperl (bioperl 1.5.1).  This version is also compatible
  with the Ensembl pipeline (e.g. for running Exonerate analyses), so
  you don't have to worry about changing back to older bioperl versions
  when you've finished extracting sequences.

  ### CAUTION!!! ###
  If you decided to use BioPerl-1.6.0 for the extract stage, once the 
  extraction has finished, you must remember to switch back to earlier 
  versions of bioperl, e.g. bioperl-0.7.2.  If you keep on using 1.6.0, 
  you will run into big problems when running exonerate (or probably any
  other) analyses due to name space clashes.  The analysis would die
  as soon as you start running it as the code will fail to even find your
  RunnableDB module! The error message will look something like this:

  " Couldn't require Bio/EnsEMBL/Analysis/RunnableDB/Exonerate2Genes 
  "Transcript_info" is not exported by the 
  Bio::EnsEMBL::Analysis::Tools::GeneBuildUtils::TranscriptUtils module  "
 
  ### END OF CAUTION ###
  
  Also, you might find ensembl-config useful as it contains exonerate 
  settings for the March 2006 human and mouse builds.  The exact config 
  used can be found in ensembl-config: 
  human/NCBI36_ig/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm, and
  mouse/NCBIM36_ig/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm
  respectively.


- Databases

  (1) A pipeline database. This database should contain the sequence
      and assembly of the genome of interest, and will store the
      results of the Exonerate alignments. 

  (2) An output database. This will be the the database into which
      the gene-segments are written by the IgSegBuilder stage. 

  (3) A release database (optional). If providing the gene segments as
      a patch for an existing build, this database will contain the
      genes, features and all other data from that build (and is the
      database that will be patched and handed over).  

- Data

  (1) The IMGT database flat-file. 

  (2) A list of entries to ignore ("kill list") when extracting
      sub-sequences from the IMGT flat-file. The latest list can be
      found in ensembl-personal/klh/imgt/data/kill_list.txt


======================================================
STEP 1: Download and preparation of the IMGT flat file
======================================================
        
The database distribution can be obtained from:

    ftp://ftp.cines.fr/IMGT/IMGT.zip
    
After unzipping, the flat-file is IMGT/imgt.dat.Z, which should be
moved into another directory and uncompressed (don't be fooled by the
apparently already-uncompressed imgt-dat; this is a small file and
seems to be an artefact). 
    
Some of the downstream processes require the flat-file to be indicate
indexed, which can be peformed thus: 

 ~searle/progs/production_code/ensembl-trunk_1106/ensc-core/src/Programs/indicate --data_dir $WORK/ig/IMGT/october2006/database -f imgt.dat -i $WORK/ig/IMGT/october2006/database/indicate_idx -l ID -r ID -p emblParser

If working with fasta files - check that the fasta header format has not changed.

======================================================
STEP 2: Extraction of relevant segments from flat-file
======================================================

ensembl-personal/klh/imgt/scripts contains two scripts to help with
this task. The first, extract_segments_from_imgt.pl, fetches
segments with the specified tag or tags from the flat file. The
second, constant_regions_from_imgt.pl, extracts constant regions from
genomic DNA entries the flat file. A specialist script is needed to do
this, because the constant regions can contain multiple exons and also
UTR which needs to be removed. 

Examples:

perl extract_segments_from_imgt.pl -tag L-PART1:L-PART2:V-REGION -tag L-REGION:V-REGION -tag L-V-REGION -tax Homo_sapiens -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -translate -minlength 30 -Cstopallow 2 -kill ensembl-personal/klh/imgt/data/kill_list.txt imgt.dat

This example extracts human V segments from the file (including the
leader sequence). The following points are of note:

- LV regions are flagged in different ways in different entries. Three
  different variants of the "-tag" option are therefore supplied.

- Rejection of entries with the keywords "orphon", "Ig-surrogate" and
  "Ig-surrogate-vpreb" because these refer to sequences that are not
  part of the core Ig/TcR gene segment set.

- We restrict ourselves to entries that have been processed by the
  IMGT team, either manually or automatically (i.e. we do not consider
  the "keyword" annotation class).

- We translate the sequences, resulting in a set of peptides to
  represent the segments. 

- We allow stop codons within 2 residues of the C-terminus of the
  protein, which can sometimes happen in functional V segments (the 3'
  end can be edited away by the recombination event, so these segments
  are stop-free and functional in some recombinations). 

- We reject entries that are found in a "kill list" file (ones that
  we know to be wrong or misleading to the build process). 

perl extract_segments_from_imgt.pl -tag C-REGION -tax Homo_sapiens -rejectkeyword orphon  -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -translate -minlength 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt imgt.dat

perl constant_regions_from_imgt.pl -tax Homo_sapiens -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -translate -minlength 150 -kill ensembl-personal/klh/imgt/data/kill_list.txt imgt.dat

These two examples extract human C segments from the file, using both
the generic script and the constant-region-specific script. 

perl extract_segments_from_imgt.pl -tag D-REGION -tax Homo_sapiens -rejectkeyword orphon  -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -mol genomic_DNA -mol DNA -keyword germline_configuration -flank 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt imgt.dat

This example extracts human D segments from the file. Since D segments
are very short, we restrict to genomic DNA entries and extract 50 bps
of flanking sequence which will make the placement on the genome more
specific. The position of the D-segment itself within the extracted
sequence is stored in the header line. This information can be
extracted into a file to be used as "annotation" for the cdna2genome
model in Exonerate, thus (if the output of th above is D.fa):

perl -ne '/\>(\S+)\s+.+cds=(\d+)\-(\d+)/ and print "$1 + $2 ", $3-$2+1, "\n";' D.fa > D.annotation

The command-lines to prepare the file necessary for Ig segment
annotation in human and mouse are found at the end of this document. 



====================================================================
STEP 3: Alignment of segment sequences to the genome using Exonerate
====================================================================
 
We use Exonerate to align the segment sequences to the genome. The
model used mostly is the standard protein2genome, but we also subvert
the use of the new cdna2genome model to short align D/J segments with
flanking sequence, the reported CDS of the prediction corresponding to
the segment itself. 

 
Some exonerate parameters used:

--bestn

In the main, exonerate is run using --bestn 1, so that only the best
alignment for each query sequence is reported. However, there are some
cases where the correct alignment is not the best scoring one; this is
apparent in the mouse TcR Beta locus for example, which contains a
duplication. For this reason, we sometimes use --bestn > 1 (say 5),
and then use a custom filter,
Bio::EnsEMBL::Analysis::Tools::IgTranscriptFilter, to choose the best
alignment (or alignments) for each query. 


--maxintron

The introns of the segments are small, so to give exonerate a better
chance to find the correct alignment we explicitly set limits: 0 for
the intronless segments (D and J), 1000 for the single-intron LV
segments, and 5000 for the C segments.


--softmasktarget

This needs to be set to false for the LV alignments, because a small
number of them lie in low-complexity regions. 


--percent

This tells exonerate only to report matches that have score that is
within the given percentage of the best possible score for that
alignment. We use it on the J segment protein alignments in
particular, some of which are too different to the genome to be
aligned accurately (resulting in a "best" alignment to the wrong
place). 


--forcegtag

This is set to true for the human/mouse C segment protein alignment
because all C segments have consensus splice-sites in these
genomes. It may not be appropriate to do this for other (especially
draft) genomes. 


--score

For some very small queries (e.g. some J segment protein queries), the
score of the correct alignment is below the default minimum score
cutoff; we therefore explicitly set the score cutoff to zero for these
types. 


The precise settings used for the first human and mouse builds can be
found in ensembl-config,
human/NCBI36_ig/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm, and
mouse/NCBIM36_ig/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm.


======================================================
STEP 4: Run the IgSegBuilder
======================================================

The IgSegBuilder RunnableDB takes the raw transcript-models produced
by exonerate and does the following

(a) Clusters transcripts into gene

(b) Prunes redundant transcripts

(c) Adjusts transcript boundaries so that they begin/end with the
expected sequence motif (a splice site or a recombination signal
sequence). 

(d) Removes "dubious" genes (e.g. short D/J segments that are not
located anywhere near any C/LV segments). 

The result is a set of final, Ig/TcR gene segments. 

The module works on slice input ids, and can cope with whole
chromomes. Since it is likely that only a small number of top-level
sequences will contain raw exonerate alignments, it is more efficient
to make input ids for these slices only; having an input id for each
toplevel sequence will ensure that the whole genome is analysed but
the vast majority of jobs will do nothing.

Note: the analysis under which these jobs are run should have
logic_name "ensembl_segment"; this analysis will be attached to the
final genes and transcripts, and is the analysis expected by the
web-code for correct display. 


Config
------

Configuration for the module is defined in
Bio/EnsEMBL/Analysis/Config/GeneBuild/IgSegmentBuilder.pm. The
variables are as follows:

TRANDB_DATABASES_NAME - the name of the database (in
Config/GeneBuild/Databases.pm) that contains the raw exonerate
transcript models. 

OUTPUTDB_DATABASES_NAME - the name of the database (in
Config/GeneBuild/Databases.pm) to which the result genes will be
written. 

{LV|C|D|J}_LOGICS - defines which logic names in
the exonerate database correspond to each of the four different
segment types. These are lists, so transcripts produced in several
different ways (with correspondingly different analyses) can be used
together to for the final set of C gene segments (for example). 

{LV|C|D|J}_OUTPUT_BIOTYPE - the biotype that will be attached to the
result genes and transcripts in the output database

SUPPORTING_FEATURE_OUTPUT_LOGIC - if the supporting features for the
results transcripts/exons are to be attached to a different analysis
to that of the genes/transcripts themselves, specify the logic name of
that analysis here. 

D_J_PROXIMITY_THRESHOLD - D/J gene segments are are not within the
given distance of a C/LV segment are rejected.



======================================================
STEP 5: Integration of segments into main build
======================================================

The final step is to combine the set of gene segments with models
produced by the "standard" gene-build, to produce a final, full gene
set. The precise mechanics of how this is done will vary on a
case-by-case basis. For human and mouse release 42, existing builds
were patched in the following way:

1) Any gene overlapping at the exon level with a gene segments was
   deleted.

2) The gene segments were added.

This was done with the script
ensembl-analysis/scripts/ig/transfer_gene_segments.pl.


If the gene segments are available whilst a full-build is being
performed, the script can still be used. It should be run as the last
step, before stable id mapping (or in the case of a brand new build,
creation) is performed.

Stable ids
----------

For human and mouse 42, it was decided that the gene segments should
be given brand-new stable ids, and that the stable ids of all deleted
genes, transcripts and translations should be retired. The
transfer_gene_segments.pl script performs this functionality (updating
the stable id mapping tables appropriately) when supplied with the
"-patch" option. A stable-id mapping run was therefore not
necessary. This strategy can be applied in when adding segments to an
existing build as a patch, where no other gene updates/changes are
involved. 

For future builds of human and mouse on the same assembly, the
segments should be integrated with the main build before stable id
mapping is performed (as explained above). The stable id mapping
process should then reassign the correct ids to the gene
segments. However, it is worth checking that it has worked correctly;
if any of the segment ids from the previous assembly build have been
retired, or if any of the segment ids in the new build are brand-new
and unique to this build, something has gone wrong with the
mapping. In this case, the offending stable ids might need to be
rescued manually. There is no script support for this unlikely event,
so if it happens, it's best to consult with the core team at the
earliest opportunity.

For future builds of human and mouse on new assemblies, the segments
should be integrated with the main build before stable id
mapping. However, in this case, there is a chance that stable id
mapping might legitimately result in stable id gain/loss. This can
happen if the sequence in the Ig/TcR regions has changed, resulting in
gene gain or loss (since these regions are mature in human and mouse,
this is rare, but can still happen). But it should be checked that the
stable id gains and losses correspond to gene gain/loss in the gene
segment set. 



======================================================
STEP 6: Xrefs to IMGT databases
======================================================

We provide Xrefs back to two databases from the IMGT group:

(a) IMGT/LIGM-DB - contains the annotated sequences from which the
source protein/cDNA data for the build was extracted 

(b) IMGT/GENE-DB - contains descriptions and annotation for all known
Ig and TcR gene segments in human and mouse. 

These xrefs are defined in a file which maps stable ids to IMGT
entities. This file is supplied as a source when performing the
Xref_Parsing step of the core xrefs (see other documentation).

For the initial segments builds in human and mouse, this file had to
be created from scratch. This was done using the script
ensembl-analysis/scripts/ig/xref_gene_segments.pl, which should be run
after stable ids for the segments have been assigned:

perl xref_gene_segments.pl -dbhost *** -dbuser *** -dbpass *** -dbport *** -dbname *** -indexdir $WORK/ig/IMGT/october2006/database -indexfile indicate_idx -allgenenames > Segment_xrefs.txt

Xrefs to IMGT/LIGM-DB are obtained via the supporting
features of the segment transcripts; we link genes, transcripts and
translations back to the original parent sequence of the protein/cDNA
that was aligned to infer the model structure.

Xrefs to IMGT/GENE-DB are more difficult to obtain, largely because the
annotation of gene names and descriptions in IMGT entries is
incomplete. For each stable id then, a list of candidate gene names
and descriptions is inferred automatically, each reported with a
percentage identity between the segment and IMGT sequence entry from
which the information was derived (from now on called the "score"). 

The Segment_xrefs.txt must therefore be "curated", choosing the most
appropriate IMGT/GENE-DB name and description for each segment. A
useful resource for this task is the IMGT/GENE-DB website, which has
images for the Ig/TcR regions in human and mouse, showing genes and
their names (example:
http://imgt.cines.fr/textes/IMGTrepertoire/LocusGenes/locus/human/IGH/Hu_IGHmap.html,
which is the Ig heavy chain locus in human). Segments with no
candidate name/description reported by the script can often be
annotated using these graphs along with contextual information
(i.e. the names of the neighbouring genes). For segments with multiple
candidate names, it is most often the one with the highest score that
is correct. A word of caution though: the IMGT/GENE-DB graphs
represent the "textbook" view of these regions (albeit quite a new
text book); it is possible that the build process will discover novel
segments not represented on these graphs. 

Impact of stable id mapping on xrefs
------------------------------------

When rebuilding on a genome that already had a segment set, it is
important to check that the stable-id mapping went as expected. If
stable-ids were gained/lost, then the IMGT xref file needs to be
updated to reflect the gained/lost ids. A good way of doing this would
be to run the above script on the whole set, using the result to
manually edit the central xref file to reflect the changes. 


=================================================
APPENDIX A: preparation of IMGT segment sequences
 for human and mouse
=================================================

Rules when extracting data from IMGT flat-file

Encoded in the script:

- Ignore pseudogenes (by scanning keywords and looking for the /pseudo tag)

- Ignore partial segments


Specified by command-line options:

- Ignore entries annotated as "orphon" because these will
  map to non-standard-locus positions on the genome and will
  therefore be misleading. 

- Ignore entries with the "Ig-surrogate" keyword, because these
  are Ig "helper" proteins and not segments (also added
  Ig-surrogate-vpreb to the bad keywords list because some of these
  do not also have the "Ig-surrogate" keyword)

- Only process entries of the "by annotator" and "automatic" class
  (thus ignoring the "keyword" class, which have only been
  keyword annotated)

Human
-----

perl extract_segments_from_imgt.pl -tag L-PART1:L-PART2:V-REGION -tag L-REGION:V-REGION -tag L-V-REGION -tax Homo_sapiens -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -translate -minlength 30 -Cstopallow 2 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > L_V.human.pep.fa

perl extract_segments_from_imgt.pl -tag D-REGION -tax Homo_sapiens -rejectkeyword orphon  -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -mol genomic_DNA -mol DNA -keyword germline_configuration -flank 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > D.human.cdna.fa

perl extract_segments_from_imgt.pl -tag J-REGION -tax Homo_sapiens -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -minlength 10 -translate -Nstopallow 2 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > J.human.pep.fa

perl extract_segments_from_imgt.pl -tag J-REGION -tax Homo_sapiens -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -mol genomic_DNA -mol DNA -keyword germline_configuration -flank 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > J.human.cdna.fa

perl extract_segments_from_imgt.pl -tag C-REGION -tax Homo_sapiens -rejectkeyword orphon  -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -translate -minlength 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > C.from_RNA.human.pep.fa

perl constant_regions_from_imgt.pl -tax Homo_sapiens -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -translate -minlength 150 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > C.from_gen_DNA.human.pep.fa

perl -ne '/\>(\S+)\s+.+cds=(\d+)\-(\d+)/ and print "$1 + $2 ", $3-$2+1, "\n";' J.human.cdna.fa > J.human.cdna.annotation

perl -ne '/\>(\S+)\s+.+cds=(\d+)\-(\d+)/ and print "$1 + $2 ", $3-$2+1, "\n";' D.human.cdna.fa > D.human.cdna.annotation

Mouse
-----

perl extract_segments_from_imgt.pl -tag L-PART1:L-PART2:V-REGION -tag L-REGION:V-REGION -tag L-V-REGION -tag V-REGION -tax Mus_musculus -rejectkeyword orphon  -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -translate -minlength 30 -Cstopallow 2  -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > L_V.mouse.pep.fa

perl extract_segments_from_imgt.pl -tag D-REGION -tax Mus_musculus -rejectkeyword orphon  -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -mol genomic_DNA -mol DNA -keyword germline_configuration -flank 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > D.mouse.cdna.fa

perl extract_segments_from_imgt.pl -tag J-REGION -tax Mus_musculus -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -minlength 10 -translate -Nstopallow 2 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > J.mouse.pep.fa 

perl extract_segments_from_imgt.pl -tag J-REGION -tax Mus_musculus -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -mol genomic_DNA -mol DNA -keyword germline_configuration -flank 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > J.mouse.cdna.fa

perl extract_segments_from_imgt.pl -tag C-REGION -tax Mus_musculus -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -class automatic -class by_annotators -translate -minlength 50 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > C.from_RNA.mouse.pep.fa

perl constant_regions_from_imgt.pl -tax Mus_musculus -rejectkeyword orphon -rejectkeyword Ig-surrogate -rejectkeyword Ig-surrogate-vpreb -translate -minlength 150 -kill ensembl-personal/klh/imgt/data/kill_list.txt $WORK/ig/IMGT/october2006/database/imgt.dat > C.from_gen_DNA.mouse.pep.fa

perl -ne '/\>(\S+)\s+.+cds=(\d+)\-(\d+)/ and print "$1 + $2 ", $3-$2+1, "\n";' J.mouse.cdna.fa > J.mouse.cdna.annotation

perl -ne '/\>(\S+)\s+.+cds=(\d+)\-(\d+)/ and print "$1 + $2 ", $3-$2+1, "\n";' D.mouse.cdna.fa > D.mouse.cdna.annotation



