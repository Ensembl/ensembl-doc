
 ##########################################
 ##       DITAG ANALYSIS README          ##
 ##########################################

This analysis attempts to prepare sequence tags and align them to the genome.
The tags are start or start & end of expressed sequences of the types ditag
(GIS, GCS, and similar) and CAGE.
For more details on the ditag technology see e.g. this:
Ng P, Wei CL, Sung WK, Chiu KP, Lipovich L, Ang CC, Gupta S, Shahab A, Ridwan A, Wong CH, Liu ET, Ruan Y.
Gene identification signature (GIS) analysis for transcriptome characterization and genome annotation.
Nat. Methods 2(2), 105-11 (2005).


1. Get data
============
Ditags in FASTA format.
Sources:
mouse
 GIS: ftp://fantom.gsc.riken.jp/FANTOM3/GIS/
 GSC: ftp://fantom.gsc.riken.jp/FANTOM3/GSC/
 or preprocessed from the PET-Tool at: http://www.gis.a-star.edu.sg/PET_Tool

human 
 CAGE: http://fantom31p.gsc.riken.jp/cage/download/hg17/


2. Prepare database
================
 typically uses core database with dna, etc. loaded + pipeline tables.

 extra table setup (part of core schema since v40):

CREATE TABLE ditag (

       ditag_id INT NOT NULL auto_increment,
       name VARCHAR(30),
       type VARCHAR(30),
       tag_count smallint(6) default 1,
       sequence TEXT,

       PRIMARY KEY ( ditag_id )
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

CREATE TABLE ditag_feature (

       ditag_feature_id int(10) unsigned NOT NULL auto_increment,
       ditag_id int(10) unsigned NOT NULL default '0',  #original ditag dbID (2:1 rel.shp)
       ditag_pair_id int(10) unsigned NOT NULL default '0',
       seq_region_id int(10) unsigned NOT NULL default '0',
       seq_region_start int(10) unsigned NOT NULL default '0',
       seq_region_end int(10) unsigned NOT NULL default '0',
       seq_region_strand tinyint(1) NOT NULL default '0',
       analysis_id int(10) unsigned NOT NULL default '0',
       hit_start int(10) unsigned NOT NULL default '0',
       hit_end int(10) unsigned NOT NULL default '0',
       hit_strand tinyint(1) NOT NULL default '0',
       cigar_line text default '',
       ditag_side char default '',

       PRIMARY KEY  (ditag_feature_id),
       KEY (ditag_id),
       KEY (ditag_pair_id)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

pipeline setup:

Use ensembl-pipeline/scripts/analysis_setup.pl with the following:

<cut>
[SubmitDitag]
module=Dummy
input_id_type=DITAG

[DitagAlign]
input_id_type=DITAG
</cut>

And ensembl-pipeline/scripts/rule_setup.pl with the following:

<cut>
[DitagAlign]
condition=SubmitDitag
</cut>


3. Setup config
===============
- GB_DBHOST, etc. in Bio::EnsEMBL::Analysis::Config::Databases.pm
- general and specific values in Bio::EnsEMBL::Analysis::Config::Ditag.pm
- BatchQueue.pm entry:
	{
      logic_name => 'DitagAlign',
      batch_size => 1,
      #something like this:
       resource   => 'select[myia64f<400] rusage[myia64f=10:duration=10:decay=1]',
      #or for some big failing jobs
      # resource   => 'select[mem>2500] rusage[mem=2500]',
      retries    => 2,
      sub_args   => '',
      runner     => '',
      runnabledb_path => 'Bio/EnsEMBL/Analysis/RunnableDB',
    },


4. Load ditag sequences
=======================
Load Ditags to database and generate inut ids for alignment of DitagFeatures:
 perl ensembl-analysis/scripts/load_ditags.pl -type ZZ11 -write -delete
The script creates a temporary file that is loaded into the database using the -write option.
The file is removed imidiately when using the -delete option

5. Produce alignment
====================
Run test:
 perl ensembl-analysis/scripts/test_RunnableDB $READ_DB_ARGS -input_id ditag.ZZ11.2 -logic_name DitagAlign -module Ditag

Start analysis:
 perl ensembl-pipeline/scripts/rulemanager.pl $WRITE_DB_ARGS -once -analysis DitagAlign -input_id_type DITAG_CHUNK

This needs to be repeated for different ditag types and usually takes between 1 and 2 days.

