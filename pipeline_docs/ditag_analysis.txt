
 ##########################################
 ##       DITAG ANALYSIS README          ##
 ##########################################

This analysis attempts to prepare sequence tags and align them to the genome using Exonerate.
The tags are start or start & end of expressed sequences of the types CAGE and ditag
(GIS, GCS, and similar).
For more details on the ditag technology see e.g.:
Ng P, Wei CL, Sung WK, Chiu KP, Lipovich L, Ang CC, Gupta S, Shahab A, Ridwan A, Wong CH, Liu ET, Ruan Y.
Gene identification signature (GIS) analysis for transcriptome characterization and genome annotation.
Nat. Methods 2(2), 105-11 (2005).


1. Get data
============
Ditags in FASTA format.
Sources:
mouse
 GIS: ftp://fantom.gsc.riken.jp/FANTOM3/GIS/
 GSC: ftp://fantom.gsc.riken.jp/FANTOM3/GSC/
 CAGE: http://fantom31p.gsc.riken.jp/cage/download/mm5

human 
 CAGE: http://fantom31p.gsc.riken.jp/cage/download/hg17/
 GIS-PET & ChIP-PET preprocessed from the PET-Tool at: http://www.gis.a-star.edu.sg/PET_Tool

1.b. Dump genome sequence (unmasked)
===================================
  e.g. like this:
  perl ensembl-analysis/scripts/sequence_dump.pl -dbhost host -dbport port -dbname name \
       -dbuser user -coord_system_name toplevel -output_dir dir -onefile

  push to /data/blastdb/Ensembl/...


2. Prepare database
================
 typically uses core database with dna, etc. loaded + pipeline tables.
 (the ditag & ditag_features tables are now part of the core schema.)

pipeline setup:

Use ensembl-pipeline/scripts/analysis_setup.pl with the following:

<cut>
[SubmitDitag]
module=Dummy
input_id_type=DITAG_CHUNK

[ExonerateTags]
input_id_type=DITAG_CHUNK
</cut>

And ensembl-pipeline/scripts/rule_setup.pl with the following:

<cut>
[ExonerateTags]
condition=SubmitDitag
</cut>

(parameters: xxx_setup.pl -dbhost x -dbname xx -dbuser xx -dbpass xx -read -file xx)

In order to store the different types of ditags seperately you should also add analysis entries 
for them, eg. for mouse:
 insert into analysis set logic_name="FANTOM_GIS_PET_raw", created=now(), module="ExonerateTags";
 insert into analysis set logic_name="FANTOM_GSC_PET_raw", created=now(), module="ExonerateTags";
 insert into analysis set logic_name="FANTOM_CAGE",        created=now(), module="ExonerateTags"; 
After running each of them, you can simply change the analysis_ids of the ditag_features:
 update ditag_feature set analysis_id=[specific-type] where analysis_id=[general-type, ExonerateTags];
to get them out of the way.


3. Setup config
===============
- GB_DBHOST in Bio::EnsEMBL::Analysis::Config::Databases.pm
- general and specific values in Bio::EnsEMBL::Analysis::Config::ExonerateTags
  Uncomment the lines for the type of ditag library (eg GSC ditags for mouse) you are analysing at the time.
- BatchQueue.pm entry:
	{
      logic_name => 'ExonerateTags,
      batch_size => 1,
      #something like this:
      queue      => 'normal',
      resource   => 'select[mygenebuild1<400] rusage[mygenebuild1=10:duration=10:decay=1]',
      #or for some big failing jobs
      #queue      => 'bigmem',
      #resource   => 'select[mem>4000] rusage[mem=4000]',
      retries    => 1,
      sub_args   => '',
      runner     => '',
      runnabledb_path => 'Bio/EnsEMBL/Analysis/RunnableDB',
    },


4. Load ditag sequences
=======================
Load Ditags to database and generate input ids for alignment of DitagFeatures:
 perl ensembl-analysis/scripts/load_ditags.pl -type ZZ11 -write -delete
The script creates a temporary file that is loaded into the database using the -write option.
The file is removed imidiately after loading when using the -delete option.
The scripts reads from Bio::EnsEMBL::Analysis::Config::ExonerateTags and
Bio::EnsEMBL::Analysis::Config::Databases, so remember to keep them in
sync with the anaylis you are doing.
Repeat the loading for all sets (of the library) you want to run in the same analysis.
So for the mouse GSC tags, load ZZ11, ZZ12, ZZ13 and ZZ13

5. Produce alignment
====================
Run test:
 perl ensembl-analysis/scripts/test_RunnableDB $READ_DB_ARGS -input_id ditag.ZZ11.2 -logic_name ExonerateTags -module ExonerateTags
 (Sometimes needs to be run in the bigmem queue)

Start analysis:
 perl ensembl-pipeline/scripts/rulemanager.pl $WRITE_DB_ARGS -once -analysis ExonerateTags -input_id_type DITAG_CHUNK

Check the number of ditag_features and compare to previous release. You will want to get hits for at least 60% of the ditags,
so the number of ditag_features should be higher than the number of ditags (pairs!).
Move the ditag_features for the analysis Exonerate_Tags to the type they are, eg. FANTOM_GSC", to keep them seperated.

The steps 4 & 5 need to be repeated for the different ditag libraries and usually takes between 1 and 2 days.


6. Reduce Complexity & Mess
===========================

Run the script ensembl-analysis/scripts/remove_messy_tags.pl to remove clusters of nasty ditags.
 perl ensembl-analysis/scripts/remove_messy_tags.pl -dbhost host -dbname dbname -ditag_analysis FANTOM_GSC > remove_tags

the output file contains UPDATE commands, setting the analysis_id to 1001 (arbitrarily chosen) for ditags to remove


7. Check display
================

Ditags can now be displayed in Apollo.
Alternatively upload as DAS track.

Before / at the release make sure the official DAS track is displayed properly and the links to the appropriate
credit pages work.
Currently we have:
 http://www.ensembl.org/Homo_sapiens/ditags/CHIP_PET.html
 http://www.ensembl.org/Homo_sapiens/ditags/GIS_PET.html (sme page)
 http://www.ensembl.org/Homo_sapiens/ditags/FANTOM_CAGE.html
 http://www.ensembl.org/Mus_musculus/ditags/FANTOM_GIS_PET.html
 http://www.ensembl.org/Mus_musculus/ditags/FANTOM_CAGE.html

