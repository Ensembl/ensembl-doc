Overview
=========
1. Run cdna2genome
        1.1 Set-up
        1.2 Annotation file
        1.3 Chunks
        1.4 More set-up
        1.1 Test and run
        1.6 Investigate missing cDNAs
        1.7 Rerun missing cDNAs with low coverage and percent_id
        1.8 Investigate 174 cDNAs
        1.9 Back up db



---------------------------------------
1. Run cdna2genome
---------------------------------------
Do we have enough cdnas to make it worth our while?

  mysql -u xxx -h xxx -Dexonerate_db -e "select count(*),daf.analysis_id, logic_name from dna_align_feature daf, analysis a where a.analysis_id = daf.analysis_id group by daf.analysis_id"
+----------+-------------+----------------+
| count(*) | analysis_id | logic_name     |
+----------+-------------+----------------+
|  4656247 |          19 | est_exonerate  |
|   212200 |          21 | cdna_exonerate |
+----------+-------------+----------------+
Yes, it should be worthwhile.

1.1 Set-up
==
NOTE : WE USE IN INTERNALLY HACKED VERSION OF EXONERATE TO RUN CDNA2GENOME
It's /usr/local/ensembl/bin/exonerate.hacked but more on that later...

Add a new analysis Xrate_cdna2genome
-------------------------------------
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into analysis values (\N, now(), 'Xrate_cdna2genome', \N, \N, \N, \N, \N, \N, \N, 'Exonerate2Genes', \N, \N, \N);"
  mysql -u xxx -p xxx -h xxx -Dreference_db -N -B -e "select analysis_id from analysis where logic_name = 'Xrate_cdna2genome'"
36
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into input_id_type_analysis (analysis_id, input_id_type) values (36,'CDNACHUNK')"
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into rule_goal (goal) values (36);"
   mysql -N -B -u xxx -p xxx -h xxx -Dreference_db -e "select rule_id from rule_goal where goal = 36"
25
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into rule_conditions (rule_id, rule_condition) values (25, 'SubmitChunks');"

Add new analysis SubmitChunks
------------------------------
  mysql -u xxx -p xxx -h xxx -Dreference_db -e "insert into analysis (created,logic_name) values (now(),'SubmitChunks')"
  mysql -u xxx -p xxx -h xxx -Dreference_db -N -B -e "select analysis_id from analysis where logic_name = 'SubmitChunks'"
37
  mysql -u xxx -p xxx -h xxx -Dreference_db -e "insert into input_id_type_analysis (analysis_id,input_id_type) values (37, 'CDNACHUNK')"

Make directories
-----------------
  mkdir /path/to/scratch/cdna2genome
  mkdir /path/to/work/cdna2genome

1.2 Annotation file
==
The annotation file contains one line for every cdna. Each line has the following format:
<cdna_accession><cds_start><length_of_coding_region><strand>

Find which Mole dbs we can use;
  mysql -u xxx -h xxx -Dmole -e "select database_name from ini where available='yes'"
+-----------------+
| database_name   |
+-----------------+
| embl_89         |
| uniprot_9_3     |
| embl_92         |
| uniprot_12_5    |
| refseq_26       |
| mushroom_200712 |
| uniprot_12_6    |
| mushroom_200801 |
| embl_93         |
| emnew_20080109  |
| emnew_20080113  |
+-----------------+

Set you PERL5LIB. You will need eg.:
  ensembl-config
  ensembl/modules
  ensembl-analysis/modules
  ensembl-pipeline/modules
  bioperl-0.7.2
  ensembl-killlist/modules
  ensembl-analysis/scripts


Note
----
The script reads in each cDNA and clips it using Bio::EnsEMBL::Analysis::Tools::PolyAClipping. It then looks for the cDNA in Mole and finds its coordinates. If the coordinates are not found or can't be parsed, a message is sent to STDERR and the cDNA is not written to the outfile. If the cDNA is found, we check that it has not been clipped into the CDS and then write the cDNA's fasta to outfile and its annotation to annotation_file. This annotation file contains additional information for the
use to know what has happened during clipping. In order for this annotation file to be used by exonerate's cdna2genome model, the annotation file with have to be edited to contain only the first 4 columns of each line
eg. less /lustre/scratch1/ensembl/user/targetted/cdna2genome/cdna.annot | awk '{print $1"\t"$2"\t"$3"\t"$4}' > /lustre/scratch1/ensembl/user/targetted/cdna2genome/annotation.txt

Run
----
  bsub -qyesterday -o /path/to/work/cdna2genome/prepare_cdnas.out -e /path/to/work/cdna2genome/prepare_cdnas.err perl /path/to/cvs/ensembl-personal/user/cdna2genome/scripts/prepare_cdnas.pl -infile /path/to/work/cdna2genome/cDNA/cDNA.fa -outfile /path/to/work/cdna2genome/cdnas.clipped -annotation /path/to/work/cdna2genome/cdnas.annotation -dbnames embl_93,embl_92,embl_89,refseq_26,uniprot_12_6,uniprot_9_3,uniprot_12_5

   grep \> /path/to/work/cdna2genome/cDNA/cDNA.fa | wc -l
26687
  grep \> /path/to/work/cdna2genome/cdnas.clipped | wc -l
21780
  less /path/to/work/cdna2genome/cdnas.annotation | wc -l
21780

Clean annotation file
----------------------
  mv /path/to/work/cdna2genome/cdnas.annotation /path/to/work/cdna2genome/cdnas.annotation.bk
  less /path/to/work/cdna2genome/cdnas.annotation.bk | awk '{print $1"\t"$2"\t"$3"\t"$4}' > /path/to/work/cdna2genome/cdnas.annotation

Check on missing ones
---------------------
26687-21780=4907 missing
  less /path/to/cvs/ensembl-personal/user/cdna2genome/scripts/prepare_cdnas.pl
# Lots of these:
# print STDERR "Parse_problem $id ($strand\t$start\t$end\t$coords) db ".$in_db->dbc->dbname." \n";
# Parse_problem BC154393.1 (                      <1..1146) db embl_93

  less /path/to/work/cdna2genome/prepare_cdnas.err | grep Not_in_mole | wc -l
84
less /path/to/work/cdna2genome/prepare_cdnas.err | grep "Clipped off too many bases" | wc -l
18
  less /path/to/work/cdna2genome/prepare_cdnas.err | grep Parse_problem | wc -l
4823

  less /path/to/work/cdna2genome/prepare_cdnas.err | grep Parse_problem | grep -e  \> -e \< | wc -l
2085
  less /path/to/work/cdna2genome/prepare_cdnas.err | grep Parse_problem | grep -v \> | grep -v \< | wc -l
2738
  less /path/to/work/cdna2genome/prepare_cdnas.err | grep '\(\s\)' | wc -l 4883
Yeah, everything looks OK.

1.3 Chunks 
==
  mkdir /path/to/work/cdna2genome/chunks
  cd /path/to/work/cdna2genome/ 

Usually we try with 10-100 cDNAs per file. There are too many cDNAs to put only one per file. For any chunks that fail (due to memory problems) in this first roud, we can split them into single files for a second run.

eg. We have 21780 cDNAs to run.  If we want 1 cDNA per file, do:
  /path/to/progs/fastasplit/fastasplit.linux /path/to/work/cdna2genome/cdnas.clipped 21780 chunks 


1.4 More set-up
==
Check we have softmasked genome:
  ls -lt /path/to/sequence/genome/species.softmasked.fa

Set your exonerate options:

  vi /path/to/cvs/ensembl-config/species/assembly/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm
#              XRATE_CDNA2GENOME => {
#                QUERYTYPE => 'dna',
#                QUERYSEQS  => '/path/to/work/cdna2genome/chunks/', # cdna chunks
#                OUTDB => { -dbname => 'reference_db',
#                           -host => ' xxx',
#                           -port => '3306',
#                           -user => ' xxx',
#                           -pass => ***REMOVED***,
#                         },
#                COVERAGE_BY_ALIGNED => 1,
#                FILTER => { OBJECT     => 'Bio::EnsEMBL::Analysis::Tools::ExonerateTranscriptFilter',
#                            PARAMETERS => {
#                              -coverage => 90,
#                              -percent_id => 97,
#                              -best_in_genome => 1,
#                              -reject_processed_pseudos => 1,
#                            },
#                          },
#                OPTIONS => "--model cdna2genome --forwardcoordinates FALSE ". # "--model est2genome --forwardcoordinates FALSE ".                            "--softmasktarget TRUE --exhaustive FALSE  --score 500 ".

Set your batchqueue options

  vi /path/to/cvs/ensembl-config/species/assembly/Bio/EnsEMBL/Pipeline/Config/BatchQueue.pm
#    {
#       logic_name => 'Xrate_cdna2genome',
#       batch_size => 1,
#       resource => 'select[type==X86_64 && mem>3700]  rusage[mem=3700]',
#       retries    => 3,
#       runner     => '',
#       sub_args   => '-M3700000',
#       queue      => 'long',
#       cleanup    => 'no',
#       output_dir => '/path/to/scratch/cdna2genome/',
#       runnabledb_path => 'Bio/EnsEMBL/Analysis/RunnableDB',
#     },

We need linux because it's the hacked version of exonerate, only compiled for LINUX 64-bit.

Input_ids
----------
 cd /path/to/work/cdna2genome/chunks/
 foreach file (*)
   mysql -h xxx -P3306 -u  xxx -p xxx -Dreference_db \
         -e "insert into input_id_analysis(input_id,input_id_type,analysis_id,created) \
         values('"$file"','CDNACHUNK',37,now())"
   end
  mysql -h xxx -P3306 -u  xxx -Dreference_db -e "select count(*) from input_id_analysis where analysis_id = 37"
+----------+
| count(*) |
+----------+
|    21780 |
+----------+

Exonerate version
--------------
Change the exonerate version:
  vi /path/to/cvs/ensembl-analysis//modules/Bio/EnsEMBL/Analysis/Runnable/BaseExonerate.pm

 if (not $self->program) {
    $self->program('/usr/local/ensembl/bin/exonerate-0.8.3';
  }
 print STDERR "\n\n* * * Running program ".$self->program." * * *\n\n";

Changed /path/to/cvs/ensembl-analysis/modules/Bio/EnsEMBL/Analysis/RunnableDB/Exonerate2Genes.pm
(Added PROGRAM)
And finally update db so that exonerate can be read from here:
  mysql -h xxx -P3306 -u  xxx -p xxx -Dreference_db -e "update analysis set program_file = '/usr/local/ensembl/bin/exonerate.hacked' where logic_name = 'Xrate_cdna2genome'"

This seems to work.

# vi /ensembl-analysis/modules/Bio/EnsEMBL/Analysis/Tools/ExonerateTranscriptFilter.pm

1.5 Test and run
==
  set you PERL5LIB

  man -M /cvs_co/exonerate/doc/man exonerate
  vi /path/to/cvs//ensembl-analysis/modules/Bio/EnsEMBL/Analysis/Runnable/ExonerateTranscript.pm
Allow type C.


Check annotation file is specified:
  vi /path/to/cvs/ensembl-config/species/assembly/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm
  #QUERYANNOTATION     => '/path/to/work/cdna2genome/cdnas.annotation',

  cd /path/to/cvs/ensembl-pipeline/scripts/
  perl test_RunnableDB -dbhost  xxx -dbport 3306 -dbname reference_db \
  -dbuser  xxx -dbpass ensembl -runnabledb_path Bio/EnsEMBL/Analysis/RunnableDB \
  -logic Xrate_cdna2genome -input_id cdnas_chunk_0000020 -no_write

# output:
# Fetching Xrate_cdna2genome from reference_db
# Exonerate command : /usr/local/ensembl/bin/exonerate.hacked --showsugar false --showvulgar false --showalignment false --ryo "RESULT: %S %pi %ql %tl %g %V\n" --model cdna2genome --forwardcoordinates FALSE --softmasktarget TRUE --exhaustive FALSE  --score 500 --saturatethreshold 100 --dnahspthreshold 60 --dnawordlen 15 --bestn 10  --querytype dna --targettype dna --query /path/to/work/cdna2genome/chunks//cdnas_chunk_0000020 --target
/path/to/sequence/genome/species.softmasked.fa


  cd /path/to/cvs/ensembl-pipeline/scripts
  bsub -qyesterday -o /path/to/scratch/cdna2genome//ruleman.out -e /path/to/scratch/cdna2genome/ruleman.err perl ./rulemanager.pl -dbhost  xxx -dbport 3306 -dbname reference_db -dbuser  xxx -dbpass ensembl -shuffle -analysis Xrate_cdna2genome -input_id_type CDNACHUNK -once -submission_limit -submission_number 10
   
Maybe check whether we can enter the exonerate to use in a config file instead of hacking
 ./monitor -dbname reference_db -dbhost  xxx -dbport 3306 -dbuser  xxx -dbpass ensembl -finished -current

  mysql -u xxx -hdbhost7 -Dgenewise_db -e "select count(*), biotype from gene group by biotype"

  grep -ri xcept /path/to/scratch/cdna2genome/*

1.6 Investigate missing cDNAs
==

eg.
First find which chunk the cdna is in:
  cd /path/to/work/cdna2genome/chunks
  find ./ -name "*" -exec grep -q "NM_207166" {} \; -print
./cdnas_chunk_0014564

Now find the err file for that chunk:
  cd /path/to/scratch/cdna2genome
  find ./ -name "*" -exec grep -q "cdnas_chunk_0014564" {} \; -print
./8/cdnas_chunk_0014564.Xrate_cdna2genome.617.err
./8/cdnas_chunk_0014564.Xrate_cdna2genome.617.out
 
Have a look at these files:
  less ./8/cdnas_chunk_0014564.Xrate_cdna2genome.617.err
There are no errors. There is nothing obviously wrong with the sequence or the annotation.

Do commandline cdna2genome
--------------------------
  /usr/local/ensembl/bin/exonerate.hacked --showsugar false --showvulgar false --showalignment false --ryo "RESULT: %S %pi %ql %tl %g %V\n" --model cdna2genome --forwardcoordinates FALSE --softmasktarget TRUE --exhaustive FALSE --score 500 --saturatethreshold 100 --dnahspthreshold 60 --dnawordlen 15 --bestn 10 --querytype dna --targettype dna --query /path/to/work/cdna2genome/chunks/cdnas_chunk_0014564 --target /path/to/sequence/genome/species.softmasked.fa --annotation /path/to/work/cdna2genome/cdnas.annotation
 # RESULT: NM_207166.1 248 824 + chromosome:Btau_4.0:Chr26:1:51750746:1 29624214 29624800 - 3564 98.58 824 51750746 . C 78 78 F 0 4 C 6 6 F 0 1 C 93 93 F 0 2 C 3 3 G 3 0 C 51 51 G 3 0 C 3 3 F 0 2 C 48 48 F 0 2 C 45 45 M 2 2 G 1 0 M 72 72 G 0 1 M 82 82 G 0 1 M 18 18 G 0 2 M 13 13 G 0 1 M 14 14 G 0 1 M 41 41
 # RESULT: NM_207166.1 0 257 + chromosome:Btau_4.0:Chr26:1:51750746:1 29623758 29624235 - 588 67.68 824 51750746 + M 18 18 G 0 1 M 60 60 G 1 0 M 4 4 G 1 0 M 7 7 G 1 0 M 4 4 G 3 0 M 19 19 G 2 0 M 5 5 G 1 0 M 11 11 G 3 0 C 9 9 S 2 2 5 0 2 I 0 226 3 0 2 S 1 1 C 69 69 G 6 0 C 15 15 G 0 3 C 3 3 F 0 4 C 12 12
 # -- completed exonerate analysis

So, we have2 results. But maybe they were post-filtered if the score was too low.
I see that we have a type C here. Maybe all type C's are not getting through?

   man -M /cvs_co/exonerate/doc/man exonerate
   M      Match
   C      Codon
   G      Gap
   N      Non-equivalenced region
   5      5' splice site
   3      3' splice site
   I      Intron
   S      Split codon
   F      Frameshift

Do a test_Runnable
-------------------
At coverage of 90% and percent_id of 97%, the genes are not let through. But I lower them both to 50 to see what I get...
  vi /path/to/cvs/ensembl-config/species/assembly/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm
  cd /path/to/cvs/ensembl-analysis/scripts/
  perl test_RunnableDB  -dbhost  xxx -dbport 3306 -dbname reference_db -dbuser  xxx -dbpass ensembl -runnabledb_path Bio/EnsEMBL/Analysis/RunnableDB -logic Xrate_cdna2genome -input_id cdnas_chunk_0014564
transcript has coverage 69.05 and percent_id 98.58
transcript has coverage 29.00 and percent_id 67.68
There were 1 features found

So, this is good news because it's easy to fix. Run all of the remaining cDNAs at low coverage and percent_ids just to get them in, and then to filter afterward if we find transcripts that we don't like.

WARNING: this may indicate an assembly problem (!)


1.7 Rerun missing cDNAs with low coverage and percent_id
==
Let's make a new annotation file, chunks dir and analysis so that we can keep everything separate:

Add a new analysis xtra_cdna2genome
-------------------------------------
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into analysis values (\N, now(), 'xtra_cdna2genome', \N, \N, \N, \N, \N, \N, \N, 'Exonerate2Genes', \N, \N, \N);"
  mysql -u xxx -p xxx -h xxx -Dreference_db -N -B -e "select analysis_id from analysis where logic_name = 'xtra_cdna2genome'"
38
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into input_id_type_analysis (analysis_id, input_id_type) values (38,'XTRACDNA')"
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into rule_goal (goal) values (38);"
   mysql -N -B -u xxx -p xxx -h xxx -Dreference_db -e "select rule_id from rule_goal where goal = 38"
26
  mysql -u xxx -p xxx -h xxx -Dreference_db -e \
    "insert into rule_conditions (rule_id, rule_condition) values (26, 'SubmitXtraChunks');"
Nearly forgot:
    mysql -h xxx -P3306 -u  xxx -p xxx -Dreference_db -e "update analysis set program_file = '/usr/local/ensembl/bin/exonerate.hacked' where logic_name = 'xtra_cdna2genome'"

Add new analysis SubmitXtraChunks
------------------------------
  mysql -u xxx -p xxx -h xxx -Dreference_db -e "insert into analysis (created,logic_name) values (now(),'SubmitXtraChunks')"
  mysql -u xxx -p xxx -h xxx -Dreference_db -N -B -e "select analysis_id from analysis where logic_name = 'SubmitXtraChunks'"
39
  mysql -u xxx -p xxx -h xxx -Dreference_db -e "insert into input_id_type_analysis (analysis_id,input_id_type) values (39, 'XTRACDNA')"

Make directories
-----------------
  mkdir /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome
  mkdir /lustre/work1/ensembl/user/cow4/xtra_cdna2genome

Annotation file and cDNA fasta file
-----------------------------------
We already have an annotation file. We want to only use a subset of these cDNAs.
Make a list of the cDNAs we want:
  comm -23 /path/to/scratch/cdna2genome/genewise_db.all /path/to/scratch/cdna2genome/genewise_db.aligned > /path/to/scratch/cdna2genome/xtra_cdnas_to_align.ls
 # 2922 entries in this file
Write a script.

  perl get_cdna2genome_subset.pl -annotation /path/to/work/cdna2genome/cdnas.annotation -wanted /path/to/scratch/cdna2genome/xtra_cdnas_to_align.ls -out  /path/to/work/cdna2genome/xtra_cdnas.annotation

  wc -l /path/to/work/cdna2genome/cdnas.annotation_subset
2922 /path/to/work/cdna2genome/cdnas.annotation_subset
  grep \> /path/to/work/cdna2genome/cdnas.clipped_subset | wc -l
2922

Chunks
------
  mkdir /path/to/work/cdna2genome/xtra_chunks
  cd /path/to/work/cdna2genome/

We want 1 cDNA per file:
  /path/to/progs/fastasplit/fastasplit.linux /path/to/work/cdna2genome/cdnas.clipped_subset 2922 xtra_chunks

Config
------
  vi /path/to/cvs/ensembl-config/species/assembly/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm
  vi /path/to/cvs/ensembl-config/species/assembly/Bio/EnsEMBL/Pipeline/Config/BatchQueue.pm

Input_ids
----------
 cd /path/to/work/cdna2genome/xtra_chunks/
 foreach file (*)
   mysql -h xxx -P3306 -u  xxx -p xxx -Dreference_db \
         -e "insert into input_id_analysis(input_id,input_id_type,analysis_id,created) \
         values('"$file"','XTRACDNA',39,now())"
   end

  mysql -u xxx -h xxx -Dreference_db -e "select count(*) from input_id_analysis where analysis_id =39"
+----------+
| count(*) |
+----------+
|     2922 |
+----------+
Good.

Test
-----
  Check perl5lib

  cd /path/to/cvs/ensembl-pipeline/scripts/
  perl test_RunnableDB -dbhost  xxx -dbport 3306 -dbname reference_db \
  -dbuser  xxx -dbpass ensembl -runnabledb_path Bio/EnsEMBL/Analysis/RunnableDB \
  -logic xtra_cdna2genome -input_id cdnas_chunk_0000001 -no_write

Make sure ref and gw db are in sync.
   mysqldump -h xxx -u xxx -p xxx -P3306 reference_db analysis | mysql -uenadmin -p xxx -hdbhost7 -P3306 -Dgenewise_db

  mysql -u xxx -hdbhost7 -Dgenewise_db -N -B -e 'show table status' | sort -k5,5n | awk '{ if ($5 > 0) { print $1"\t"$5 } }'

Run
----
  bsub -qyesterday -o /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome//ruleman.out -e /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/ruleman.err perl ./rulemanager.pl -dbhost  xxx -dbport 3306 -dbname reference_db -dbuser  xxx -dbpass ensembl -shuffle -analysis xtra_cdna2genome -input_id_type XTRACDNA -once -shuffle

   ./monitor -dbname reference_db -dbhost  xxx -dbport 3306 -dbuser  xxx -dbpass ensembl -finished -current

  grep -ri xcept /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/*

  mysql -u xxx -hdbhost7 -Dgenewise_db -e "select count(*), biotype from gene group by biotype"

   mysql -N -B -hdbhost7 -P3306 -u  xxx -Dgenewise_db -e "select  hit_name from transcript t, transcript_supporting_feature tsf, dna_align_feature daf where t.transcript_id = tsf.transcript_id and daf.dna_align_feature_id = tsf.feature_id and t.analysis_id = 38" | sort -u | wc -l
2748

So, there are still 174 cDNAs that have not aligned.
(2922-2748=174)

Which cDNAs didn't align?
--------------------------
  mysql -N -B -hdbhost7 -P3306 -u  xxx -Dgenewise_db -e "select  hit_name from transcript t, transcript_supporting_feature tsf, dna_align_feature daf where t.transcript_id = tsf.transcript_id and daf.dna_align_feature_id = tsf.feature_id and t.analysis_id = 38" | sort -u > /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/genewise_db.aligned
  less /path/to/work/cdna2genome/cdnas.annotation_subset | awk '{print $1}' | sort -u >/lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/genewise_db.all
  comm -23 /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/genewise_db.all /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/genewise_db.aligned 

I looked at 5 of these 174 missing cDNAs and they are not in the kill list, so this is not the reason for their being missing.
The numbers still see fairly consecutive. Quite a few submitted by Robert Kirkpatrick in Vancouver. Also some say this:
"PROVISIONAL REFSEQ: This record has not yet been subject to final
            NCBI review. The reference sequence was derived from xxx"

1.8 Investigate 174 cDNAs
==
Have a closer look
--------------------
Look in human to see if we have that piece of the genome assembly. (Can do this by looking at the two genes that lie on either side of the human orthologue of the missing cDNAs)

 - NM_001105504.1 did not align
 - Go to www.ncbi.nlm.nih.gov/ and search for  NM_001105504.1
 - We get http://www.ncbi.nlm.nih.gov/sites/entrez?db=gene&cmd=search&term=NM_001105504.1 and see that the gene is named  CLRN3 clarin 3 in cow.
 - Search for humam  CLRN3 clarin 3 in ensembl.
 - We find it http://www.ensembl.org/Homo_sapiens/geneview?gene=ENSG00000180745
 - Go to contig view http://www.ensembl.org/Homo_sapiens/contigview?l=10:129566104-129581201
 - I see CLRN3 on the (-) strand. PTPRE is upstream on the (+) strand quite close. FOXI2 is upstream on the (+) strand.
 - Look for PTPRE (ENSG00000132334) and FOXI2 (ENSG00000186766) in cow
 - Go to Synteny View: http://www.ensembl.org/Homo_sapiens/syntenyview?otherspecies=Bos_taurus;chr=10;loc=128067055 
   (+)Hsap DOCK1  = (-)Btau LOC537203 (26: 43.28 Mb)
   (-)Hsap NP_001034851.1 = (+)Btau LOC784700 (26: 43.60 Mb)
   (+)Hsap NPS_HUMAN  = (-)Btau NPS_BOVIN (26: 43.19 Mb)
   (+)Hsap FOXI2 = (-)Btau LOC613373 (26: 43.04 Mb)
   (-)Hsap CLRN3  = no Btau homologues 
   (+)Hsap PTPRE = (+)Btau Q148I7_BOVIN (26: 44.13 Mb)
   (-)Hsap MKI67 = (-)Btau LOC788889 (26: 44.18 Mb)
   So, current e! does not have CLRN3
 - Looking Apollo, there are some N islands in this area. 

 - AF188710.1 did not align
 - Go to www.ncbi.nlm.nih.gov/ and search for AF188710.1
 - We get http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nuccore&id=6651449 and see that it's os taurus stearoyl CoA desaturase (SCD) mRNA, complete cds.
 - Search for SCD in human using e!: http://www.ensembl.org/Homo_sapiens/geneview?gene=ENSG00000099194 
 - Got to graphical view, then view syntenic region with cow.
 - no SCD homologues in current e!, but most of surrounding homologues are present
 - Apollo chr 26:20370000-20640000 yields nothing, don't eve see Ns at a glance

 - BC103337.1 did not align
 - Go to www.ncbi.nlm.nih.gov/ and search for BC103337.1 
 - It's Bos taurus actin related protein 2/3 complex, subunit 5
 - Find this gene in Hsap in e!: http://www.ensembl.org/Homo_sapiens/geneview?gene=ENSG00000162704
 - Got to graphical view, then view syntenic region with cow.
 - http://www.ensembl.org/Homo_sapiens/syntenyview?otherspecies=Bos_taurus;chr=1;loc=181865316
 - Eeek, it's a bit messy. Corresponds to chr 16 near 60M, but no cow homologues
 - Can't easily match syntenic genes in apollo and e!

 - NM_174518.1 did not align
 - Go to www.ncbi.nlm.nih.gov/ and search for NM_174518.1  
 - It's Bos taurus Cbp/p300-interacting transactivator, with Glu/Asp-rich carboxy-terminal domain, 1 (CITED1)
 - Look at Hsap in e! http://www.ensembl.org/Homo_sapiens/geneview?gene=ENSG00000125931
 - Got to graphical view, then view syntenic region with cow.
 - http://www.ensembl.org/Homo_sapiens/syntenyview?otherspecies=Bos_taurus;chr=X;loc=71440992
 - Corresponds to chr X near 55M, no homologues
 - Almost the whole of cow chr X is syntenic with Hsap chr X except for a handful of genes. Quite a few human genes have homolgues missing in cow.
 
 - M58170.1 did not align
 - Go to www.ncbi.nlm.nih.gov/ and search for M58170.1 
 - It's Bovine phosducin. Find it in human.
 - Go to graphical view, then view syntenic region with cow.
 - http://www.ensembl.org/Homo_sapiens/syntenyview?otherspecies=Bos_taurus;chr=1;loc=184688107.5
 - Ooh! It's there on chr 16 near 60.70 Mb: PHOS_BOVIN

Histograms
----------
Also, would be a good idea to plot the distribution of the xtra_cdna2genome coverage and percent_id, so that we can see how many of them are poor matches. 
Get the hcoverage and percent_id:
   mysql -N -B -u xxx -hdbhost7 -Dgenewise_db -e "select hit_name, max(hcoverage) from dna_align_feature daf, transcript_supporting_feature tsf where daf.dna_align_feature_id = tsf.feature_id and tsf.feature_type = 'dna_align_feature' and daf.analysis_id = 38 group by hit_name" > /path/to/species_xtra_cdna2genome_max_hcoverage.ls
  mysql -N -B -u xxx -hdbhost7 -Dgenewise_db -e "select hit_name, max(perc_ident) from dna_align_feature daf, transcript_supporting_feature tsf where daf.dna_align_feature_id = tsf.feature_id and tsf.feature_type = 'dna_align_feature' and daf.analysis_id = 38 group by hit_name" > /path/to/species_xtra_cdna2genome_max_perc_ident.ls

  cp /path/to/species_xtra_cdna2genome_max_hcoverage.ls /lustre/work1/ensembl/user/cow4/xtra_cdna2genome/max_hcoverage.ls 
  cp /path/to/species_xtra_cdna2genome_max_perc_ident.ls /lustre/work1/ensembl/user/cow4/xtra_cdna2genome/max_perc_ident.ls

Coverage histogram
  cd /path/to/cvs/ensembl-personal/user/cow/scripts
  perl ./bins_for_histogram.pl 1 /lustre/work1/ensembl/user/cow4/xtra_cdna2genome/max_hcoverage.ls  > /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/coverage.hist 

Percent_id histogram
  perl ./bins_for_histogram.pl 1 /lustre/work1/ensembl/user/cow4/xtra_cdna2genome/max_perc_ident.ls > /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/percent_id.hist

  cp /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/coverage.hist /path/to/species_xtra_cdna2genome_coverage.hist
  cp /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/percent_id.hist /path/to/species_xtra_cdna2genome_percent_id.hist

View coverage in R
--------------------
# Deskpro terminal:
R
> histogram = read.table(file = '/path/to/species_xtra_cdna2genome_coverage.hist');
> colnames(histogram) = c('coverage','count');
> pdf(file='/path/to/species_coverage.pdf');
> plot(histogram$coverage,histogram$count, type = "p", xlim = c(1,100), ylim = NULL, main = "COW: coverage vs count", xlab="coverage", ylab="no. of transcripts with this coverage");
>  dev.off()
> histogram2 = read.table(file = '/path/to/species_xtra_cdna2genome_percent_id.hist');
> colnames(histogram2) = c('percent_id','count');
> dev.off()
> pdf(file='/path/to/species_percent_id.pdf');
> plot(histogram2$percent_id,histogram2$count, type = "p", xlim = c(1,100), ylim = NULL, main = "COW: percent_id vs count", xlab="percent_id", ylab="no. of transcripts with this percent_id");
> dev.off()
> quit()

  cp /path/to/species_coverage.pdf /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/cow_xtra_cdna2genome_coverage.pdf
  cp /path/to/species_percent_id.pdf /lustre/scratch1/ensembl/user/cow4/xtra_cdna2genome/cow_xtra_cdna2genome_percent_id.pdf

The coverage is all over the show but the percent_id is neat: almost flat, with it sharply increasing at about 95%.

We decide to only take those with perc_ident > 93 (past the little bump at 92)

1.9 Back up db
==
We may want to come back and look at the xtra_cdna2genome cDNAs that did and did not align, as they may give us useful information on assembly errors.

  ssh  xxx
  df -h /mysql
500G  442G   58G  89% /mysql
  ssh dbhost7
  su - mysqlens
  scp -r /mysql/data_3306/databases/genewise_db  xxx:/mysql/data_3306/databases/genewise_db_bk

