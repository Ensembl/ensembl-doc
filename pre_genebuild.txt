Running the pre-genebuild
-------------------------

Val Curwen 10.7.2001

Overview
--------

As far as possible the genebuild is automated, though not (yet)
incorporated into the pipeline.


The pre-genebuild prepares genes from known proteins, from regions
with similarity to known proteins and from regions with similarity to
translations of Riken mouse cDNAs. Data from the pre-genebuild are
incorporated into the final gene build during which additional genes
will also be predicited from evidence not yet used.

The modules that need to be run are contained in Bio::EnsEMBL::Pipeline::RunnableDB and are:

1. TargettedGeneE2G

   Uses genewise to build a gene by comparing an input protein (id)
   with a region of the golden path.

   Uses est_genome to predict a gene with UTRs from the corresponding
   cDNA (id) with the same region of the golden path.

   Combines the two predictions, using UTRs from the est_genome
   prediction with internal gene structure from the genewise
   prediction.

2. FPC_BlastMiniGenewise

   Depends on the genscan peptides having already been blasted against
   sptr during the pipeline run.

   For a given golden path region, finds all the blast hits from
   genescan peptides to entries in sptr and filters out those that
   overlap with genes predicted in stage 1. Any remaining sequences
   are reblasted against the golden path region and the resultant
   features used to build a MiniSeq over which we can run genewise and
   build genes.

3. Riken_BlastMiniGenewise

   Depends on the genscan peptides having already been blasted against
   translations of Riken cDNAs during the pipleine run.

   Based on FPC_BlastMiniGenewise, but we build genes from all Riken
   hits, without pre-screening for those that overlap with a Targetted
   gene. These are used as supporting evidence for our final genes.

However, various steps need to be completed before you can run these modules.

Preparation for pre-genebuild
-----------------------------

1. I use 2 areas, one scratch area for the genebuild LSF error and
output files, and an area where I keep all the files generated during
processing so I can refer back.

So, for example, for the April golden path:

mkdir /work2/vac/GeneBuild/Apr_gp
mkdir /scratch4/ensembl/vac/GeneBuild

2. make sure you are using bioperl 0.7 

3. cvs checkout ensembl and ensembl-pipeline code

4. make sure ensembl/modules and ensembl-pipeline/modules and bioperl 0.7 are in your $PERL5LIB

5. make sure ensembl-pipeline/scripts/GeneBuild is in your PATH, or be
prepared to qualify the names of al the various scripts.

6. cvs checkout rd-utils, or make sure you have access to a pmatch executable.

7. The scripts for running the pre-genebuild are in ensembl-pipeline/scripts/GeneBuild
The most important file is the ensembl-pipeline/scripts/GeneBuild/GB_conf.pl, 
which needs to be filled in with details relevant to your directory setup. The 
fields to be filled in should be self explanatory.

8. download golden path data

from Jim Kent

This takes up a good bit of space.

http://genome-test.cse.ucsc.edu/gs.7/oo.29/contigFa.zip

mv contigFa.zip /data/humangenome
cd /data/humangenome
unzip contigFa.zip

9. download and prepare human proteome data

TargettedGeneE2G needs as input protein ids and corresponding cDNA ids
together with a golden path (fpc contig) location to which that
protein matches. The first stage is downloading human protein
sequences from SwissProt/TrEMBL and Refseq. Currently we need both
fasta and full entry files:

mkdir /work2/vac/GeneBuild/Apr_gp/human_proteome
cd /work2/vac/GeneBuild/Apr_gp/human_proteome

#downloading swissprot files:
ftp.ebi.ac.uk
ftp>cd pub/databases/SPproteomes
ftp>get 9606.SPC and 9606.FASTAC
ftp> bye
mv 9606.SPC sptr.swiss
mv 9606.FASTAC sptr.fa

# downloading refseq files:
ftp ftp.ncbi.nlm.nih.gov
ftp>cd refseq/H_sapiens/mRNA_Prot/
ftp>get hs.fsa.gz and hs.gnp.gz
ftp>bye
gunzip hs.fsa.gz
gunzip hs.gnp.gz
mv hs.fsa refseq.fa
mv hs.gnp refseq.gnp

# running scripts

prepare_proteome.pl cleans up the sptr and refseq files, prepares a
single proteome file and runs a test pmatch to make sure there are no
sequences that will cause pmatch to loop.

all you need to do, assuming you have filled in GB_conf.pl properly, is type:

prepare_proteome.pl

remove sequences containing polyX from your input fasta files if prompted to do so. This script should be done in minutes.

protein2cdna.pl uses sptr.swiss and refseq.gnp to try to identify the
longest cDNA corresponding with each protein, for UTR prediction

protein2cdna.pl >& /scratch3/ensembl/vac/p2c.out

the output is written to the cdna_pairs file you specified in
GB_conf.pl, but there is quite a lot of chat from the sequence
fetching which I capture to a scratch file. This script will take a
couple of hours to run at least.

10. run the pmatches

We use pmatch to compare all the human protein sequences to the golden
path contigs to try to find the best match for each protein in the
genome. We look at the extent to which the protein is covered ie what
percentage of the protein matches the genome in a given region, and we
take the hit with the best coverage, plus any hits with 2% of that
coverage. Caveat - we throw away anything that has less than 25%
coverage as the best hit.

There are 2 scripts that deal with pmatch running and result
processing: pm_filter.pl needs to be run on every chromosome (finds
best in chromosome matches), then pm_filter.pl finds the best in
genome match from all of these.

mkdir /work2/vac/TGE/Apr_gp/pmatches
cd /work2/vac/TGE/Apr_gp/pmatches
pm_filter.pl -chr 1
pm_filter.pl -chr 2
.
.
pm_filter.pl -chr UL

cat *.pm.out > all.pm.out
pm_bestmatch.pl < all.pm.out


11. make bsub lines for submitting jobs

/work2/vac/TGE/Apr_gp/pmatches/pm_best.out contains the info we need for TargettedGeneE2G bsubs. Length based runnables (FPC_BlastMiniGenewise, Riken_BlastMiniGenewise) are much simpler to make bsubs for.

Anyhow, this is all handled by typing

make_bsubs.pl

Various job files are created.
Also, look in your tmpdir (what you specified in GB_conf.pl) - all the output directories needed for collecting the bsub out & err files are made if they didn't already exist

Running the runnableDBs
-----------------------

This is as easy as typing submit.pl < jobfile
You need to run the runnables in order, and wait for one stage to finish before you start the next.

Run TargettedGeneE2G 
Run FPC_BlastMiniGenewise 
Run Riken_BlastMiniGenewise

Each of these was complete in less than 24 hours last time.

Checking for errors
-------------------

Sadly, there's no easy way to do this yet. I grep through the err files from bsub commands for "EXCE" and look to see what the errors are. Once I identify key words seen in exceptions I'll greop through for those, and use comm to find if there a re more things I am missing eg

foreach i(*.err)
grep -l EXCE $i >> EXCE.err
grep -l "gap contigs" $i >> gapcontigs.err
end

(comm only works on sorted files, but effectively these already are sorted)

comm -23 EXCE.err gapcontigs.err 

this will tell you which files have EXCE in them but not "gap contigs" so you can look at those.

Error checking often takes as much time as setting up to run the jobs in the first place ...