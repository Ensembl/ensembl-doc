****************************************
* Ensembl stable ID mapping user guide *
****************************************

Author: Patrick Meidl <meidl@ebi.ac.uk>

Please post questions to the Ensembl developers mailinglist
<ensembl-dev@ebi.ac.uk>


This document describes how to use the Ensembl stable ID mapping application.
If you intend to modify or extend the code, please refer to
developer_guide.txt.

Table of content
================

Overview
Files
Overview
Quickref
Run the stable ID mapping
Logging
Troubleshooting
Tools


-------------------------------------------------------------------------------
Files
-------------------------------------------------------------------------------

All scripts are in ensembl/misc-scripts/idmapping/. Paths in this document are
relative to this directory unless stated otherwise.

Documentation is at ensembl-doc/id_mapping/.


-------------------------------------------------------------------------------
Quickref
-------------------------------------------------------------------------------

1. Configure:

  Make a copy of the default configuration (default.conf) and adapt it (there
  are comments in the default conf which will help you understand the settings).

  Use the --conf option to use this configuration when you run the stable ID
  mapping.

  This application uses Bio::EnsEMBL::Utils::ConfParser to read and parse the
  configuration file and commandline options (the latter override the former),
  please refer to documentation in this module if you experience problems.

2. Run it:

  To run the stable ID mapping, use the run.pl script. This script is a wrapper
  (and optional dispatcher) for dump_cache.pl and id_mapping.pl, and you will
  therefore get log output in individual files for these scripts. to former
  builds a cache by dumping all needed data to files, the latter does the actual
  mapping.

  You can dispatch this script automatically to the farm by using the --lsf
  option (it will re-exec itself with the same parameters on the farm).

  Another useful option is --logouto which will automatically generate time
  stamped logfiles in your log directory (default $dumppath/log).

  If you want to review your configuration before actually running the code, use
  the -i (--interactive) option.

3. Watch it run:

  Since log output is directly written to a file on lustre or nfs, you can use
  `tail -f` to check the logs live.

4. Check the results:

  All output will be in the 'dumppath' you configured, separated into
  subdirectories. Look at summary_email.txt for an overview and at log/ for
  logs, stats/ for detailed stats and debug/ for debug output. if you want to
  manually upload results, the table data is in the tables/ directory.

  There is also a script called utils/compare_results.pl which will compare
  results from two different mapping runs (perl and java). This script is in an
  early stage though so might be buggy and is certainly incomplete.

5. Re-run from a checkpoint:

  If the stable ID mapping fails to whatever reason, fix the problem and then
  re-run it. At various points checkpoint information is written to files and
  the script will automatically read this information rather than re-computing
  it.

  If, for debugging purporses, you want to force a re-run from a particular
  checkpoint, you can do this by selectively removing the "checkpoint" files. A
  common scenario during code development is to skip the cache building, this is
  done by deleting all output but the cache/ directory. for more elaborate stuff
  you'll have to look at the other output and delete the right files (needs some
  familiarity with the code; a utility script to do this is planned).


-------------------------------------------------------------------------------
Logging
-------------------------------------------------------------------------------

Three ways of logging:

1. to STDERR:

  if you don't specify any of the log* configuration parameters

2. to a single file:

  use --logfile
  slightly broken (until file locking is implemented)

3. to individual files with autogenerated names:

  use --logauto and --logautobase


<todo> explain loglevels


-------------------------------------------------------------------------------
Files
-------------------------------------------------------------------------------

~/bin/latest (for reading logfiles)
